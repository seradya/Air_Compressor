
AirCompressor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004764  08004764  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800476c  0800476c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000010  08004784  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004784  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a0f  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203c  00000000  00000000  00029a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002c490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001056a  00000000  00000000  0002cd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd55  00000000  00000000  0003d2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aeaa  00000000  00000000  0004b03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002350  00000000  00000000  000a5f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004690 	.word	0x08004690

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004690 	.word	0x08004690

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d115      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d113      	bne.n	8000250 <__aeabi_ldivmod+0x30>
 8000228:	2900      	cmp	r1, #0
 800022a:	db06      	blt.n	800023a <__aeabi_ldivmod+0x1a>
 800022c:	dc01      	bgt.n	8000232 <__aeabi_ldivmod+0x12>
 800022e:	2800      	cmp	r0, #0
 8000230:	d006      	beq.n	8000240 <__aeabi_ldivmod+0x20>
 8000232:	2000      	movs	r0, #0
 8000234:	43c0      	mvns	r0, r0
 8000236:	0841      	lsrs	r1, r0, #1
 8000238:	e002      	b.n	8000240 <__aeabi_ldivmod+0x20>
 800023a:	2180      	movs	r1, #128	; 0x80
 800023c:	0609      	lsls	r1, r1, #24
 800023e:	2000      	movs	r0, #0
 8000240:	b407      	push	{r0, r1, r2}
 8000242:	4802      	ldr	r0, [pc, #8]	; (800024c <__aeabi_ldivmod+0x2c>)
 8000244:	a101      	add	r1, pc, #4	; (adr r1, 800024c <__aeabi_ldivmod+0x2c>)
 8000246:	1840      	adds	r0, r0, r1
 8000248:	9002      	str	r0, [sp, #8]
 800024a:	bd03      	pop	{r0, r1, pc}
 800024c:	ffffffd1 	.word	0xffffffd1
 8000250:	b403      	push	{r0, r1}
 8000252:	4668      	mov	r0, sp
 8000254:	b501      	push	{r0, lr}
 8000256:	9802      	ldr	r0, [sp, #8]
 8000258:	f000 f834 	bl	80002c4 <__gnu_ldivmod_helper>
 800025c:	9b01      	ldr	r3, [sp, #4]
 800025e:	469e      	mov	lr, r3
 8000260:	b002      	add	sp, #8
 8000262:	bc0c      	pop	{r2, r3}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <__aeabi_lmul>:
 8000268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026a:	46ce      	mov	lr, r9
 800026c:	4647      	mov	r7, r8
 800026e:	b580      	push	{r7, lr}
 8000270:	0007      	movs	r7, r0
 8000272:	4699      	mov	r9, r3
 8000274:	0c3b      	lsrs	r3, r7, #16
 8000276:	469c      	mov	ip, r3
 8000278:	0413      	lsls	r3, r2, #16
 800027a:	0c1b      	lsrs	r3, r3, #16
 800027c:	001d      	movs	r5, r3
 800027e:	000e      	movs	r6, r1
 8000280:	4661      	mov	r1, ip
 8000282:	0400      	lsls	r0, r0, #16
 8000284:	0c14      	lsrs	r4, r2, #16
 8000286:	0c00      	lsrs	r0, r0, #16
 8000288:	4345      	muls	r5, r0
 800028a:	434b      	muls	r3, r1
 800028c:	4360      	muls	r0, r4
 800028e:	4361      	muls	r1, r4
 8000290:	18c0      	adds	r0, r0, r3
 8000292:	0c2c      	lsrs	r4, r5, #16
 8000294:	1820      	adds	r0, r4, r0
 8000296:	468c      	mov	ip, r1
 8000298:	4283      	cmp	r3, r0
 800029a:	d903      	bls.n	80002a4 <__aeabi_lmul+0x3c>
 800029c:	2380      	movs	r3, #128	; 0x80
 800029e:	025b      	lsls	r3, r3, #9
 80002a0:	4698      	mov	r8, r3
 80002a2:	44c4      	add	ip, r8
 80002a4:	4649      	mov	r1, r9
 80002a6:	4379      	muls	r1, r7
 80002a8:	4372      	muls	r2, r6
 80002aa:	0c03      	lsrs	r3, r0, #16
 80002ac:	4463      	add	r3, ip
 80002ae:	042d      	lsls	r5, r5, #16
 80002b0:	0c2d      	lsrs	r5, r5, #16
 80002b2:	18c9      	adds	r1, r1, r3
 80002b4:	0400      	lsls	r0, r0, #16
 80002b6:	1940      	adds	r0, r0, r5
 80002b8:	1889      	adds	r1, r1, r2
 80002ba:	bcc0      	pop	{r6, r7}
 80002bc:	46b9      	mov	r9, r7
 80002be:	46b0      	mov	r8, r6
 80002c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <__gnu_ldivmod_helper>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	46ce      	mov	lr, r9
 80002c8:	4647      	mov	r7, r8
 80002ca:	b580      	push	{r7, lr}
 80002cc:	4691      	mov	r9, r2
 80002ce:	4698      	mov	r8, r3
 80002d0:	0004      	movs	r4, r0
 80002d2:	000d      	movs	r5, r1
 80002d4:	f000 f998 	bl	8000608 <__divdi3>
 80002d8:	0007      	movs	r7, r0
 80002da:	000e      	movs	r6, r1
 80002dc:	0002      	movs	r2, r0
 80002de:	000b      	movs	r3, r1
 80002e0:	4648      	mov	r0, r9
 80002e2:	4641      	mov	r1, r8
 80002e4:	f7ff ffc0 	bl	8000268 <__aeabi_lmul>
 80002e8:	1a24      	subs	r4, r4, r0
 80002ea:	418d      	sbcs	r5, r1
 80002ec:	9b08      	ldr	r3, [sp, #32]
 80002ee:	0038      	movs	r0, r7
 80002f0:	0031      	movs	r1, r6
 80002f2:	601c      	str	r4, [r3, #0]
 80002f4:	605d      	str	r5, [r3, #4]
 80002f6:	bcc0      	pop	{r6, r7}
 80002f8:	46b9      	mov	r9, r7
 80002fa:	46b0      	mov	r8, r6
 80002fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)

08000300 <__aeabi_fdiv>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	464f      	mov	r7, r9
 8000304:	4646      	mov	r6, r8
 8000306:	46d6      	mov	lr, sl
 8000308:	0245      	lsls	r5, r0, #9
 800030a:	b5c0      	push	{r6, r7, lr}
 800030c:	0047      	lsls	r7, r0, #1
 800030e:	1c0c      	adds	r4, r1, #0
 8000310:	0a6d      	lsrs	r5, r5, #9
 8000312:	0e3f      	lsrs	r7, r7, #24
 8000314:	0fc6      	lsrs	r6, r0, #31
 8000316:	2f00      	cmp	r7, #0
 8000318:	d100      	bne.n	800031c <__aeabi_fdiv+0x1c>
 800031a:	e070      	b.n	80003fe <__aeabi_fdiv+0xfe>
 800031c:	2fff      	cmp	r7, #255	; 0xff
 800031e:	d100      	bne.n	8000322 <__aeabi_fdiv+0x22>
 8000320:	e075      	b.n	800040e <__aeabi_fdiv+0x10e>
 8000322:	00eb      	lsls	r3, r5, #3
 8000324:	2580      	movs	r5, #128	; 0x80
 8000326:	04ed      	lsls	r5, r5, #19
 8000328:	431d      	orrs	r5, r3
 800032a:	2300      	movs	r3, #0
 800032c:	4699      	mov	r9, r3
 800032e:	469a      	mov	sl, r3
 8000330:	3f7f      	subs	r7, #127	; 0x7f
 8000332:	0260      	lsls	r0, r4, #9
 8000334:	0a43      	lsrs	r3, r0, #9
 8000336:	4698      	mov	r8, r3
 8000338:	0063      	lsls	r3, r4, #1
 800033a:	0e1b      	lsrs	r3, r3, #24
 800033c:	0fe4      	lsrs	r4, r4, #31
 800033e:	2b00      	cmp	r3, #0
 8000340:	d04e      	beq.n	80003e0 <__aeabi_fdiv+0xe0>
 8000342:	2bff      	cmp	r3, #255	; 0xff
 8000344:	d046      	beq.n	80003d4 <__aeabi_fdiv+0xd4>
 8000346:	4642      	mov	r2, r8
 8000348:	00d0      	lsls	r0, r2, #3
 800034a:	2280      	movs	r2, #128	; 0x80
 800034c:	04d2      	lsls	r2, r2, #19
 800034e:	4302      	orrs	r2, r0
 8000350:	4690      	mov	r8, r2
 8000352:	2200      	movs	r2, #0
 8000354:	3b7f      	subs	r3, #127	; 0x7f
 8000356:	0031      	movs	r1, r6
 8000358:	1aff      	subs	r7, r7, r3
 800035a:	464b      	mov	r3, r9
 800035c:	4061      	eors	r1, r4
 800035e:	b2c9      	uxtb	r1, r1
 8000360:	4313      	orrs	r3, r2
 8000362:	2b0f      	cmp	r3, #15
 8000364:	d900      	bls.n	8000368 <__aeabi_fdiv+0x68>
 8000366:	e0b5      	b.n	80004d4 <__aeabi_fdiv+0x1d4>
 8000368:	486e      	ldr	r0, [pc, #440]	; (8000524 <__aeabi_fdiv+0x224>)
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	58c3      	ldr	r3, [r0, r3]
 800036e:	469f      	mov	pc, r3
 8000370:	2300      	movs	r3, #0
 8000372:	4698      	mov	r8, r3
 8000374:	0026      	movs	r6, r4
 8000376:	4645      	mov	r5, r8
 8000378:	4692      	mov	sl, r2
 800037a:	4653      	mov	r3, sl
 800037c:	2b02      	cmp	r3, #2
 800037e:	d100      	bne.n	8000382 <__aeabi_fdiv+0x82>
 8000380:	e089      	b.n	8000496 <__aeabi_fdiv+0x196>
 8000382:	2b03      	cmp	r3, #3
 8000384:	d100      	bne.n	8000388 <__aeabi_fdiv+0x88>
 8000386:	e09e      	b.n	80004c6 <__aeabi_fdiv+0x1c6>
 8000388:	2b01      	cmp	r3, #1
 800038a:	d018      	beq.n	80003be <__aeabi_fdiv+0xbe>
 800038c:	003b      	movs	r3, r7
 800038e:	337f      	adds	r3, #127	; 0x7f
 8000390:	2b00      	cmp	r3, #0
 8000392:	dd69      	ble.n	8000468 <__aeabi_fdiv+0x168>
 8000394:	076a      	lsls	r2, r5, #29
 8000396:	d004      	beq.n	80003a2 <__aeabi_fdiv+0xa2>
 8000398:	220f      	movs	r2, #15
 800039a:	402a      	ands	r2, r5
 800039c:	2a04      	cmp	r2, #4
 800039e:	d000      	beq.n	80003a2 <__aeabi_fdiv+0xa2>
 80003a0:	3504      	adds	r5, #4
 80003a2:	012a      	lsls	r2, r5, #4
 80003a4:	d503      	bpl.n	80003ae <__aeabi_fdiv+0xae>
 80003a6:	4b60      	ldr	r3, [pc, #384]	; (8000528 <__aeabi_fdiv+0x228>)
 80003a8:	401d      	ands	r5, r3
 80003aa:	003b      	movs	r3, r7
 80003ac:	3380      	adds	r3, #128	; 0x80
 80003ae:	2bfe      	cmp	r3, #254	; 0xfe
 80003b0:	dd00      	ble.n	80003b4 <__aeabi_fdiv+0xb4>
 80003b2:	e070      	b.n	8000496 <__aeabi_fdiv+0x196>
 80003b4:	01ad      	lsls	r5, r5, #6
 80003b6:	0a6d      	lsrs	r5, r5, #9
 80003b8:	b2d8      	uxtb	r0, r3
 80003ba:	e002      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 80003bc:	000e      	movs	r6, r1
 80003be:	2000      	movs	r0, #0
 80003c0:	2500      	movs	r5, #0
 80003c2:	05c0      	lsls	r0, r0, #23
 80003c4:	4328      	orrs	r0, r5
 80003c6:	07f6      	lsls	r6, r6, #31
 80003c8:	4330      	orrs	r0, r6
 80003ca:	bce0      	pop	{r5, r6, r7}
 80003cc:	46ba      	mov	sl, r7
 80003ce:	46b1      	mov	r9, r6
 80003d0:	46a8      	mov	r8, r5
 80003d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d4:	4643      	mov	r3, r8
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d13f      	bne.n	800045a <__aeabi_fdiv+0x15a>
 80003da:	2202      	movs	r2, #2
 80003dc:	3fff      	subs	r7, #255	; 0xff
 80003de:	e003      	b.n	80003e8 <__aeabi_fdiv+0xe8>
 80003e0:	4643      	mov	r3, r8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d12d      	bne.n	8000442 <__aeabi_fdiv+0x142>
 80003e6:	2201      	movs	r2, #1
 80003e8:	0031      	movs	r1, r6
 80003ea:	464b      	mov	r3, r9
 80003ec:	4061      	eors	r1, r4
 80003ee:	b2c9      	uxtb	r1, r1
 80003f0:	4313      	orrs	r3, r2
 80003f2:	2b0f      	cmp	r3, #15
 80003f4:	d834      	bhi.n	8000460 <__aeabi_fdiv+0x160>
 80003f6:	484d      	ldr	r0, [pc, #308]	; (800052c <__aeabi_fdiv+0x22c>)
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	58c3      	ldr	r3, [r0, r3]
 80003fc:	469f      	mov	pc, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d113      	bne.n	800042a <__aeabi_fdiv+0x12a>
 8000402:	2304      	movs	r3, #4
 8000404:	4699      	mov	r9, r3
 8000406:	3b03      	subs	r3, #3
 8000408:	2700      	movs	r7, #0
 800040a:	469a      	mov	sl, r3
 800040c:	e791      	b.n	8000332 <__aeabi_fdiv+0x32>
 800040e:	2d00      	cmp	r5, #0
 8000410:	d105      	bne.n	800041e <__aeabi_fdiv+0x11e>
 8000412:	2308      	movs	r3, #8
 8000414:	4699      	mov	r9, r3
 8000416:	3b06      	subs	r3, #6
 8000418:	27ff      	movs	r7, #255	; 0xff
 800041a:	469a      	mov	sl, r3
 800041c:	e789      	b.n	8000332 <__aeabi_fdiv+0x32>
 800041e:	230c      	movs	r3, #12
 8000420:	4699      	mov	r9, r3
 8000422:	3b09      	subs	r3, #9
 8000424:	27ff      	movs	r7, #255	; 0xff
 8000426:	469a      	mov	sl, r3
 8000428:	e783      	b.n	8000332 <__aeabi_fdiv+0x32>
 800042a:	0028      	movs	r0, r5
 800042c:	f000 f8ce 	bl	80005cc <__clzsi2>
 8000430:	2776      	movs	r7, #118	; 0x76
 8000432:	1f43      	subs	r3, r0, #5
 8000434:	409d      	lsls	r5, r3
 8000436:	2300      	movs	r3, #0
 8000438:	427f      	negs	r7, r7
 800043a:	4699      	mov	r9, r3
 800043c:	469a      	mov	sl, r3
 800043e:	1a3f      	subs	r7, r7, r0
 8000440:	e777      	b.n	8000332 <__aeabi_fdiv+0x32>
 8000442:	4640      	mov	r0, r8
 8000444:	f000 f8c2 	bl	80005cc <__clzsi2>
 8000448:	4642      	mov	r2, r8
 800044a:	1f43      	subs	r3, r0, #5
 800044c:	409a      	lsls	r2, r3
 800044e:	2376      	movs	r3, #118	; 0x76
 8000450:	425b      	negs	r3, r3
 8000452:	4690      	mov	r8, r2
 8000454:	1a1b      	subs	r3, r3, r0
 8000456:	2200      	movs	r2, #0
 8000458:	e77d      	b.n	8000356 <__aeabi_fdiv+0x56>
 800045a:	23ff      	movs	r3, #255	; 0xff
 800045c:	2203      	movs	r2, #3
 800045e:	e77a      	b.n	8000356 <__aeabi_fdiv+0x56>
 8000460:	000e      	movs	r6, r1
 8000462:	20ff      	movs	r0, #255	; 0xff
 8000464:	2500      	movs	r5, #0
 8000466:	e7ac      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 8000468:	2001      	movs	r0, #1
 800046a:	1ac0      	subs	r0, r0, r3
 800046c:	281b      	cmp	r0, #27
 800046e:	dca6      	bgt.n	80003be <__aeabi_fdiv+0xbe>
 8000470:	379e      	adds	r7, #158	; 0x9e
 8000472:	002a      	movs	r2, r5
 8000474:	40bd      	lsls	r5, r7
 8000476:	40c2      	lsrs	r2, r0
 8000478:	1e6b      	subs	r3, r5, #1
 800047a:	419d      	sbcs	r5, r3
 800047c:	4315      	orrs	r5, r2
 800047e:	076b      	lsls	r3, r5, #29
 8000480:	d004      	beq.n	800048c <__aeabi_fdiv+0x18c>
 8000482:	230f      	movs	r3, #15
 8000484:	402b      	ands	r3, r5
 8000486:	2b04      	cmp	r3, #4
 8000488:	d000      	beq.n	800048c <__aeabi_fdiv+0x18c>
 800048a:	3504      	adds	r5, #4
 800048c:	016b      	lsls	r3, r5, #5
 800048e:	d544      	bpl.n	800051a <__aeabi_fdiv+0x21a>
 8000490:	2001      	movs	r0, #1
 8000492:	2500      	movs	r5, #0
 8000494:	e795      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 8000496:	20ff      	movs	r0, #255	; 0xff
 8000498:	2500      	movs	r5, #0
 800049a:	e792      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 800049c:	2580      	movs	r5, #128	; 0x80
 800049e:	2600      	movs	r6, #0
 80004a0:	20ff      	movs	r0, #255	; 0xff
 80004a2:	03ed      	lsls	r5, r5, #15
 80004a4:	e78d      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 80004a6:	2300      	movs	r3, #0
 80004a8:	4698      	mov	r8, r3
 80004aa:	2080      	movs	r0, #128	; 0x80
 80004ac:	03c0      	lsls	r0, r0, #15
 80004ae:	4205      	tst	r5, r0
 80004b0:	d009      	beq.n	80004c6 <__aeabi_fdiv+0x1c6>
 80004b2:	4643      	mov	r3, r8
 80004b4:	4203      	tst	r3, r0
 80004b6:	d106      	bne.n	80004c6 <__aeabi_fdiv+0x1c6>
 80004b8:	4645      	mov	r5, r8
 80004ba:	4305      	orrs	r5, r0
 80004bc:	026d      	lsls	r5, r5, #9
 80004be:	0026      	movs	r6, r4
 80004c0:	20ff      	movs	r0, #255	; 0xff
 80004c2:	0a6d      	lsrs	r5, r5, #9
 80004c4:	e77d      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 80004c6:	2080      	movs	r0, #128	; 0x80
 80004c8:	03c0      	lsls	r0, r0, #15
 80004ca:	4305      	orrs	r5, r0
 80004cc:	026d      	lsls	r5, r5, #9
 80004ce:	20ff      	movs	r0, #255	; 0xff
 80004d0:	0a6d      	lsrs	r5, r5, #9
 80004d2:	e776      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 80004d4:	4642      	mov	r2, r8
 80004d6:	016b      	lsls	r3, r5, #5
 80004d8:	0150      	lsls	r0, r2, #5
 80004da:	4283      	cmp	r3, r0
 80004dc:	d219      	bcs.n	8000512 <__aeabi_fdiv+0x212>
 80004de:	221b      	movs	r2, #27
 80004e0:	2500      	movs	r5, #0
 80004e2:	3f01      	subs	r7, #1
 80004e4:	2601      	movs	r6, #1
 80004e6:	001c      	movs	r4, r3
 80004e8:	006d      	lsls	r5, r5, #1
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	db01      	blt.n	80004f4 <__aeabi_fdiv+0x1f4>
 80004f0:	4298      	cmp	r0, r3
 80004f2:	d801      	bhi.n	80004f8 <__aeabi_fdiv+0x1f8>
 80004f4:	1a1b      	subs	r3, r3, r0
 80004f6:	4335      	orrs	r5, r6
 80004f8:	3a01      	subs	r2, #1
 80004fa:	2a00      	cmp	r2, #0
 80004fc:	d1f3      	bne.n	80004e6 <__aeabi_fdiv+0x1e6>
 80004fe:	1e5a      	subs	r2, r3, #1
 8000500:	4193      	sbcs	r3, r2
 8000502:	431d      	orrs	r5, r3
 8000504:	003b      	movs	r3, r7
 8000506:	337f      	adds	r3, #127	; 0x7f
 8000508:	000e      	movs	r6, r1
 800050a:	2b00      	cmp	r3, #0
 800050c:	dd00      	ble.n	8000510 <__aeabi_fdiv+0x210>
 800050e:	e741      	b.n	8000394 <__aeabi_fdiv+0x94>
 8000510:	e7aa      	b.n	8000468 <__aeabi_fdiv+0x168>
 8000512:	221a      	movs	r2, #26
 8000514:	2501      	movs	r5, #1
 8000516:	1a1b      	subs	r3, r3, r0
 8000518:	e7e4      	b.n	80004e4 <__aeabi_fdiv+0x1e4>
 800051a:	01ad      	lsls	r5, r5, #6
 800051c:	2000      	movs	r0, #0
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	e74f      	b.n	80003c2 <__aeabi_fdiv+0xc2>
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	080046d4 	.word	0x080046d4
 8000528:	f7ffffff 	.word	0xf7ffffff
 800052c:	08004714 	.word	0x08004714

08000530 <__aeabi_i2f>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	2800      	cmp	r0, #0
 8000534:	d013      	beq.n	800055e <__aeabi_i2f+0x2e>
 8000536:	17c3      	asrs	r3, r0, #31
 8000538:	18c6      	adds	r6, r0, r3
 800053a:	405e      	eors	r6, r3
 800053c:	0fc4      	lsrs	r4, r0, #31
 800053e:	0030      	movs	r0, r6
 8000540:	f000 f844 	bl	80005cc <__clzsi2>
 8000544:	239e      	movs	r3, #158	; 0x9e
 8000546:	0005      	movs	r5, r0
 8000548:	1a1b      	subs	r3, r3, r0
 800054a:	2b96      	cmp	r3, #150	; 0x96
 800054c:	dc0f      	bgt.n	800056e <__aeabi_i2f+0x3e>
 800054e:	2808      	cmp	r0, #8
 8000550:	dd01      	ble.n	8000556 <__aeabi_i2f+0x26>
 8000552:	3d08      	subs	r5, #8
 8000554:	40ae      	lsls	r6, r5
 8000556:	0276      	lsls	r6, r6, #9
 8000558:	0a76      	lsrs	r6, r6, #9
 800055a:	b2d8      	uxtb	r0, r3
 800055c:	e002      	b.n	8000564 <__aeabi_i2f+0x34>
 800055e:	2400      	movs	r4, #0
 8000560:	2000      	movs	r0, #0
 8000562:	2600      	movs	r6, #0
 8000564:	05c0      	lsls	r0, r0, #23
 8000566:	4330      	orrs	r0, r6
 8000568:	07e4      	lsls	r4, r4, #31
 800056a:	4320      	orrs	r0, r4
 800056c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800056e:	2b99      	cmp	r3, #153	; 0x99
 8000570:	dd0c      	ble.n	800058c <__aeabi_i2f+0x5c>
 8000572:	2205      	movs	r2, #5
 8000574:	0031      	movs	r1, r6
 8000576:	1a12      	subs	r2, r2, r0
 8000578:	40d1      	lsrs	r1, r2
 800057a:	000a      	movs	r2, r1
 800057c:	0001      	movs	r1, r0
 800057e:	0030      	movs	r0, r6
 8000580:	311b      	adds	r1, #27
 8000582:	4088      	lsls	r0, r1
 8000584:	1e41      	subs	r1, r0, #1
 8000586:	4188      	sbcs	r0, r1
 8000588:	4302      	orrs	r2, r0
 800058a:	0016      	movs	r6, r2
 800058c:	2d05      	cmp	r5, #5
 800058e:	dc12      	bgt.n	80005b6 <__aeabi_i2f+0x86>
 8000590:	0031      	movs	r1, r6
 8000592:	4f0d      	ldr	r7, [pc, #52]	; (80005c8 <__aeabi_i2f+0x98>)
 8000594:	4039      	ands	r1, r7
 8000596:	0772      	lsls	r2, r6, #29
 8000598:	d009      	beq.n	80005ae <__aeabi_i2f+0x7e>
 800059a:	200f      	movs	r0, #15
 800059c:	4030      	ands	r0, r6
 800059e:	2804      	cmp	r0, #4
 80005a0:	d005      	beq.n	80005ae <__aeabi_i2f+0x7e>
 80005a2:	3104      	adds	r1, #4
 80005a4:	014a      	lsls	r2, r1, #5
 80005a6:	d502      	bpl.n	80005ae <__aeabi_i2f+0x7e>
 80005a8:	239f      	movs	r3, #159	; 0x9f
 80005aa:	4039      	ands	r1, r7
 80005ac:	1b5b      	subs	r3, r3, r5
 80005ae:	0189      	lsls	r1, r1, #6
 80005b0:	0a4e      	lsrs	r6, r1, #9
 80005b2:	b2d8      	uxtb	r0, r3
 80005b4:	e7d6      	b.n	8000564 <__aeabi_i2f+0x34>
 80005b6:	1f6a      	subs	r2, r5, #5
 80005b8:	4096      	lsls	r6, r2
 80005ba:	0031      	movs	r1, r6
 80005bc:	4f02      	ldr	r7, [pc, #8]	; (80005c8 <__aeabi_i2f+0x98>)
 80005be:	4039      	ands	r1, r7
 80005c0:	0772      	lsls	r2, r6, #29
 80005c2:	d0f4      	beq.n	80005ae <__aeabi_i2f+0x7e>
 80005c4:	e7e9      	b.n	800059a <__aeabi_i2f+0x6a>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	fbffffff 	.word	0xfbffffff

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <__divdi3>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	4657      	mov	r7, sl
 800060c:	464e      	mov	r6, r9
 800060e:	4645      	mov	r5, r8
 8000610:	46de      	mov	lr, fp
 8000612:	b5e0      	push	{r5, r6, r7, lr}
 8000614:	000f      	movs	r7, r1
 8000616:	0019      	movs	r1, r3
 8000618:	2300      	movs	r3, #0
 800061a:	0006      	movs	r6, r0
 800061c:	4698      	mov	r8, r3
 800061e:	0010      	movs	r0, r2
 8000620:	b083      	sub	sp, #12
 8000622:	2f00      	cmp	r7, #0
 8000624:	da07      	bge.n	8000636 <__divdi3+0x2e>
 8000626:	0033      	movs	r3, r6
 8000628:	003c      	movs	r4, r7
 800062a:	2700      	movs	r7, #0
 800062c:	425e      	negs	r6, r3
 800062e:	41a7      	sbcs	r7, r4
 8000630:	2301      	movs	r3, #1
 8000632:	425b      	negs	r3, r3
 8000634:	4698      	mov	r8, r3
 8000636:	2900      	cmp	r1, #0
 8000638:	da07      	bge.n	800064a <__divdi3+0x42>
 800063a:	4643      	mov	r3, r8
 800063c:	43db      	mvns	r3, r3
 800063e:	000c      	movs	r4, r1
 8000640:	4698      	mov	r8, r3
 8000642:	0003      	movs	r3, r0
 8000644:	2100      	movs	r1, #0
 8000646:	4258      	negs	r0, r3
 8000648:	41a1      	sbcs	r1, r4
 800064a:	0034      	movs	r4, r6
 800064c:	003d      	movs	r5, r7
 800064e:	4682      	mov	sl, r0
 8000650:	4689      	mov	r9, r1
 8000652:	42b9      	cmp	r1, r7
 8000654:	d86a      	bhi.n	800072c <__divdi3+0x124>
 8000656:	d067      	beq.n	8000728 <__divdi3+0x120>
 8000658:	4649      	mov	r1, r9
 800065a:	4650      	mov	r0, sl
 800065c:	f000 f8ba 	bl	80007d4 <__clzdi2>
 8000660:	4683      	mov	fp, r0
 8000662:	0039      	movs	r1, r7
 8000664:	0030      	movs	r0, r6
 8000666:	f000 f8b5 	bl	80007d4 <__clzdi2>
 800066a:	465b      	mov	r3, fp
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	469c      	mov	ip, r3
 8000670:	3b20      	subs	r3, #32
 8000672:	469b      	mov	fp, r3
 8000674:	d46b      	bmi.n	800074e <__divdi3+0x146>
 8000676:	4658      	mov	r0, fp
 8000678:	4651      	mov	r1, sl
 800067a:	4081      	lsls	r1, r0
 800067c:	4660      	mov	r0, ip
 800067e:	000b      	movs	r3, r1
 8000680:	4651      	mov	r1, sl
 8000682:	4081      	lsls	r1, r0
 8000684:	000a      	movs	r2, r1
 8000686:	42bb      	cmp	r3, r7
 8000688:	d900      	bls.n	800068c <__divdi3+0x84>
 800068a:	e072      	b.n	8000772 <__divdi3+0x16a>
 800068c:	42bb      	cmp	r3, r7
 800068e:	d100      	bne.n	8000692 <__divdi3+0x8a>
 8000690:	e079      	b.n	8000786 <__divdi3+0x17e>
 8000692:	0034      	movs	r4, r6
 8000694:	003d      	movs	r5, r7
 8000696:	4659      	mov	r1, fp
 8000698:	1aa4      	subs	r4, r4, r2
 800069a:	419d      	sbcs	r5, r3
 800069c:	2900      	cmp	r1, #0
 800069e:	da00      	bge.n	80006a2 <__divdi3+0x9a>
 80006a0:	e074      	b.n	800078c <__divdi3+0x184>
 80006a2:	2100      	movs	r1, #0
 80006a4:	2000      	movs	r0, #0
 80006a6:	2601      	movs	r6, #1
 80006a8:	9000      	str	r0, [sp, #0]
 80006aa:	9101      	str	r1, [sp, #4]
 80006ac:	4659      	mov	r1, fp
 80006ae:	408e      	lsls	r6, r1
 80006b0:	9601      	str	r6, [sp, #4]
 80006b2:	4661      	mov	r1, ip
 80006b4:	2601      	movs	r6, #1
 80006b6:	408e      	lsls	r6, r1
 80006b8:	4661      	mov	r1, ip
 80006ba:	9600      	str	r6, [sp, #0]
 80006bc:	2900      	cmp	r1, #0
 80006be:	d05f      	beq.n	8000780 <__divdi3+0x178>
 80006c0:	07d9      	lsls	r1, r3, #31
 80006c2:	0856      	lsrs	r6, r2, #1
 80006c4:	430e      	orrs	r6, r1
 80006c6:	085f      	lsrs	r7, r3, #1
 80006c8:	4661      	mov	r1, ip
 80006ca:	2201      	movs	r2, #1
 80006cc:	2300      	movs	r3, #0
 80006ce:	e00c      	b.n	80006ea <__divdi3+0xe2>
 80006d0:	42af      	cmp	r7, r5
 80006d2:	d101      	bne.n	80006d8 <__divdi3+0xd0>
 80006d4:	42a6      	cmp	r6, r4
 80006d6:	d80a      	bhi.n	80006ee <__divdi3+0xe6>
 80006d8:	1ba4      	subs	r4, r4, r6
 80006da:	41bd      	sbcs	r5, r7
 80006dc:	1924      	adds	r4, r4, r4
 80006de:	416d      	adcs	r5, r5
 80006e0:	3901      	subs	r1, #1
 80006e2:	18a4      	adds	r4, r4, r2
 80006e4:	415d      	adcs	r5, r3
 80006e6:	2900      	cmp	r1, #0
 80006e8:	d006      	beq.n	80006f8 <__divdi3+0xf0>
 80006ea:	42af      	cmp	r7, r5
 80006ec:	d9f0      	bls.n	80006d0 <__divdi3+0xc8>
 80006ee:	3901      	subs	r1, #1
 80006f0:	1924      	adds	r4, r4, r4
 80006f2:	416d      	adcs	r5, r5
 80006f4:	2900      	cmp	r1, #0
 80006f6:	d1f8      	bne.n	80006ea <__divdi3+0xe2>
 80006f8:	9800      	ldr	r0, [sp, #0]
 80006fa:	9901      	ldr	r1, [sp, #4]
 80006fc:	465b      	mov	r3, fp
 80006fe:	1900      	adds	r0, r0, r4
 8000700:	4169      	adcs	r1, r5
 8000702:	2b00      	cmp	r3, #0
 8000704:	db4d      	blt.n	80007a2 <__divdi3+0x19a>
 8000706:	002e      	movs	r6, r5
 8000708:	002c      	movs	r4, r5
 800070a:	40de      	lsrs	r6, r3
 800070c:	4663      	mov	r3, ip
 800070e:	40dc      	lsrs	r4, r3
 8000710:	465b      	mov	r3, fp
 8000712:	2b00      	cmp	r3, #0
 8000714:	db55      	blt.n	80007c2 <__divdi3+0x1ba>
 8000716:	0034      	movs	r4, r6
 8000718:	409c      	lsls	r4, r3
 800071a:	0023      	movs	r3, r4
 800071c:	4664      	mov	r4, ip
 800071e:	40a6      	lsls	r6, r4
 8000720:	0032      	movs	r2, r6
 8000722:	1a80      	subs	r0, r0, r2
 8000724:	4199      	sbcs	r1, r3
 8000726:	e003      	b.n	8000730 <__divdi3+0x128>
 8000728:	42b0      	cmp	r0, r6
 800072a:	d995      	bls.n	8000658 <__divdi3+0x50>
 800072c:	2000      	movs	r0, #0
 800072e:	2100      	movs	r1, #0
 8000730:	4643      	mov	r3, r8
 8000732:	2b00      	cmp	r3, #0
 8000734:	d004      	beq.n	8000740 <__divdi3+0x138>
 8000736:	0003      	movs	r3, r0
 8000738:	000c      	movs	r4, r1
 800073a:	2100      	movs	r1, #0
 800073c:	4258      	negs	r0, r3
 800073e:	41a1      	sbcs	r1, r4
 8000740:	b003      	add	sp, #12
 8000742:	bcf0      	pop	{r4, r5, r6, r7}
 8000744:	46bb      	mov	fp, r7
 8000746:	46b2      	mov	sl, r6
 8000748:	46a9      	mov	r9, r5
 800074a:	46a0      	mov	r8, r4
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074e:	4662      	mov	r2, ip
 8000750:	4648      	mov	r0, r9
 8000752:	2320      	movs	r3, #32
 8000754:	4651      	mov	r1, sl
 8000756:	4090      	lsls	r0, r2
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	40d9      	lsrs	r1, r3
 800075c:	0003      	movs	r3, r0
 800075e:	9100      	str	r1, [sp, #0]
 8000760:	9900      	ldr	r1, [sp, #0]
 8000762:	4660      	mov	r0, ip
 8000764:	430b      	orrs	r3, r1
 8000766:	4651      	mov	r1, sl
 8000768:	4081      	lsls	r1, r0
 800076a:	000a      	movs	r2, r1
 800076c:	42bb      	cmp	r3, r7
 800076e:	d800      	bhi.n	8000772 <__divdi3+0x16a>
 8000770:	e78c      	b.n	800068c <__divdi3+0x84>
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	9000      	str	r0, [sp, #0]
 8000778:	9101      	str	r1, [sp, #4]
 800077a:	4661      	mov	r1, ip
 800077c:	2900      	cmp	r1, #0
 800077e:	d19f      	bne.n	80006c0 <__divdi3+0xb8>
 8000780:	9800      	ldr	r0, [sp, #0]
 8000782:	9901      	ldr	r1, [sp, #4]
 8000784:	e7d4      	b.n	8000730 <__divdi3+0x128>
 8000786:	42b1      	cmp	r1, r6
 8000788:	d8f3      	bhi.n	8000772 <__divdi3+0x16a>
 800078a:	e782      	b.n	8000692 <__divdi3+0x8a>
 800078c:	4661      	mov	r1, ip
 800078e:	2620      	movs	r6, #32
 8000790:	2701      	movs	r7, #1
 8000792:	1a76      	subs	r6, r6, r1
 8000794:	2000      	movs	r0, #0
 8000796:	2100      	movs	r1, #0
 8000798:	40f7      	lsrs	r7, r6
 800079a:	9000      	str	r0, [sp, #0]
 800079c:	9101      	str	r1, [sp, #4]
 800079e:	9701      	str	r7, [sp, #4]
 80007a0:	e787      	b.n	80006b2 <__divdi3+0xaa>
 80007a2:	4662      	mov	r2, ip
 80007a4:	2320      	movs	r3, #32
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	002a      	movs	r2, r5
 80007aa:	409a      	lsls	r2, r3
 80007ac:	0026      	movs	r6, r4
 80007ae:	0013      	movs	r3, r2
 80007b0:	4662      	mov	r2, ip
 80007b2:	40d6      	lsrs	r6, r2
 80007b4:	002c      	movs	r4, r5
 80007b6:	431e      	orrs	r6, r3
 80007b8:	4663      	mov	r3, ip
 80007ba:	40dc      	lsrs	r4, r3
 80007bc:	465b      	mov	r3, fp
 80007be:	2b00      	cmp	r3, #0
 80007c0:	daa9      	bge.n	8000716 <__divdi3+0x10e>
 80007c2:	4662      	mov	r2, ip
 80007c4:	2320      	movs	r3, #32
 80007c6:	0035      	movs	r5, r6
 80007c8:	4094      	lsls	r4, r2
 80007ca:	1a9b      	subs	r3, r3, r2
 80007cc:	40dd      	lsrs	r5, r3
 80007ce:	0023      	movs	r3, r4
 80007d0:	432b      	orrs	r3, r5
 80007d2:	e7a3      	b.n	800071c <__divdi3+0x114>

080007d4 <__clzdi2>:
 80007d4:	b510      	push	{r4, lr}
 80007d6:	2900      	cmp	r1, #0
 80007d8:	d103      	bne.n	80007e2 <__clzdi2+0xe>
 80007da:	f7ff fef7 	bl	80005cc <__clzsi2>
 80007de:	3020      	adds	r0, #32
 80007e0:	e002      	b.n	80007e8 <__clzdi2+0x14>
 80007e2:	0008      	movs	r0, r1
 80007e4:	f7ff fef2 	bl	80005cc <__clzsi2>
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)

080007ec <I2Cx_WriteData>:
}

//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)

{
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af04      	add	r7, sp, #16
 80007f2:	0004      	movs	r4, r0
 80007f4:	0008      	movs	r0, r1
 80007f6:	0011      	movs	r1, r2
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	1c22      	adds	r2, r4, #0
 80007fc:	801a      	strh	r2, [r3, #0]
 80007fe:	1d7b      	adds	r3, r7, #5
 8000800:	1c02      	adds	r2, r0, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	1c0a      	adds	r2, r1, #0
 8000808:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_OK;
 800080a:	250f      	movs	r5, #15
 800080c:	197b      	adds	r3, r7, r5
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]

  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000812:	1d7b      	adds	r3, r7, #5
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b29a      	uxth	r2, r3
 8000818:	197c      	adds	r4, r7, r5
 800081a:	1dbb      	adds	r3, r7, #6
 800081c:	8819      	ldrh	r1, [r3, #0]
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <I2Cx_WriteData+0x64>)
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	025b      	lsls	r3, r3, #9
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2301      	movs	r3, #1
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2301      	movs	r3, #1
 8000830:	f001 fd9a 	bl	8002368 <HAL_I2C_Mem_Write>
 8000834:	0003      	movs	r3, r0
 8000836:	7023      	strb	r3, [r4, #0]

  if(status != HAL_OK) bme280_status = I2C_Mem_Write_Err;
 8000838:	197b      	adds	r3, r7, r5
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <I2Cx_WriteData+0x5a>
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <I2Cx_WriteData+0x68>)
 8000842:	2203      	movs	r2, #3
 8000844:	701a      	strb	r2, [r3, #0]

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b004      	add	sp, #16
 800084c:	bdb0      	pop	{r4, r5, r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	20000060 	.word	0x20000060
 8000854:	20000054 	.word	0x20000054

08000858 <I2Cx_ReadData>:

//------------------------------------------------

static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)

{
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af04      	add	r7, sp, #16
 800085e:	0002      	movs	r2, r0
 8000860:	1dbb      	adds	r3, r7, #6
 8000862:	801a      	strh	r2, [r3, #0]
 8000864:	1d7b      	adds	r3, r7, #5
 8000866:	1c0a      	adds	r2, r1, #0
 8000868:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_OK;
 800086a:	250f      	movs	r5, #15
 800086c:	197b      	adds	r3, r7, r5
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]

  uint8_t value = 0;
 8000872:	260e      	movs	r6, #14
 8000874:	19bb      	adds	r3, r7, r6
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]

  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 800087a:	1d7b      	adds	r3, r7, #5
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b29a      	uxth	r2, r3
 8000880:	197c      	adds	r4, r7, r5
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	8819      	ldrh	r1, [r3, #0]
 8000886:	480d      	ldr	r0, [pc, #52]	; (80008bc <I2Cx_ReadData+0x64>)
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	025b      	lsls	r3, r3, #9
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	19bb      	adds	r3, r7, r6
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	f001 fe94 	bl	80025c4 <HAL_I2C_Mem_Read>
 800089c:	0003      	movs	r3, r0
 800089e:	7023      	strb	r3, [r4, #0]

  if(status != HAL_OK) bme280_status = I2C_Mem_Read_Err;
 80008a0:	197b      	adds	r3, r7, r5
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <I2Cx_ReadData+0x56>
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <I2Cx_ReadData+0x68>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]

  return value;
 80008ae:	230e      	movs	r3, #14
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	781b      	ldrb	r3, [r3, #0]

}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b005      	add	sp, #20
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008bc:	20000060 	.word	0x20000060
 80008c0:	20000054 	.word	0x20000054

080008c4 <I2Cx_ReadData16>:
//------------------------------------------------
//------------------------------------------------

static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)

{
 80008c4:	b5b0      	push	{r4, r5, r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	603a      	str	r2, [r7, #0]
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	1c02      	adds	r2, r0, #0
 80008d0:	801a      	strh	r2, [r3, #0]
 80008d2:	1d7b      	adds	r3, r7, #5
 80008d4:	1c0a      	adds	r2, r1, #0
 80008d6:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_OK;
 80008d8:	250f      	movs	r5, #15
 80008da:	197b      	adds	r3, r7, r5
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]

  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 80008e0:	1d7b      	adds	r3, r7, #5
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	197c      	adds	r4, r7, r5
 80008e8:	1dbb      	adds	r3, r7, #6
 80008ea:	8819      	ldrh	r1, [r3, #0]
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <I2Cx_ReadData16+0x58>)
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	025b      	lsls	r3, r3, #9
 80008f2:	9302      	str	r3, [sp, #8]
 80008f4:	2302      	movs	r3, #2
 80008f6:	9301      	str	r3, [sp, #4]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	9300      	str	r3, [sp, #0]
 80008fc:	2301      	movs	r3, #1
 80008fe:	f001 fe61 	bl	80025c4 <HAL_I2C_Mem_Read>
 8000902:	0003      	movs	r3, r0
 8000904:	7023      	strb	r3, [r4, #0]

  if(status != HAL_OK) bme280_status = I2C_Mem_Read_Err;
 8000906:	197b      	adds	r3, r7, r5
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <I2Cx_ReadData16+0x50>
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <I2Cx_ReadData16+0x5c>)
 8000910:	2202      	movs	r2, #2
 8000912:	701a      	strb	r2, [r3, #0]

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bdb0      	pop	{r4, r5, r7, pc}
 800091c:	20000060 	.word	0x20000060
 8000920:	20000054 	.word	0x20000054

08000924 <I2Cx_ReadData24>:

//------------------------------------------------

static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)

{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af04      	add	r7, sp, #16
 800092a:	603a      	str	r2, [r7, #0]
 800092c:	1dbb      	adds	r3, r7, #6
 800092e:	1c02      	adds	r2, r0, #0
 8000930:	801a      	strh	r2, [r3, #0]
 8000932:	1d7b      	adds	r3, r7, #5
 8000934:	1c0a      	adds	r2, r1, #0
 8000936:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_OK;
 8000938:	250f      	movs	r5, #15
 800093a:	197b      	adds	r3, r7, r5
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]

  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 8000940:	1d7b      	adds	r3, r7, #5
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b29a      	uxth	r2, r3
 8000946:	197c      	adds	r4, r7, r5
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	8819      	ldrh	r1, [r3, #0]
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <I2Cx_ReadData24+0x58>)
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	025b      	lsls	r3, r3, #9
 8000952:	9302      	str	r3, [sp, #8]
 8000954:	2303      	movs	r3, #3
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2301      	movs	r3, #1
 800095e:	f001 fe31 	bl	80025c4 <HAL_I2C_Mem_Read>
 8000962:	0003      	movs	r3, r0
 8000964:	7023      	strb	r3, [r4, #0]

  if(status != HAL_OK) bme280_status = I2C_Mem_Read_Err;
 8000966:	197b      	adds	r3, r7, r5
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <I2Cx_ReadData24+0x50>
 800096e:	4b04      	ldr	r3, [pc, #16]	; (8000980 <I2Cx_ReadData24+0x5c>)
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]

}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bdb0      	pop	{r4, r5, r7, pc}
 800097c:	20000060 	.word	0x20000060
 8000980:	20000054 	.word	0x20000054

08000984 <BME280_WriteReg>:

//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)

{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	1dbb      	adds	r3, r7, #6
 8000992:	1c0a      	adds	r2, r1, #0
 8000994:	701a      	strb	r2, [r3, #0]

  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	0019      	movs	r1, r3
 80009a0:	20ec      	movs	r0, #236	; 0xec
 80009a2:	f7ff ff23 	bl	80007ec <I2Cx_WriteData>

}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}

080009ae <BME280_ReadReg>:

//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)

{
 80009ae:	b5b0      	push	{r4, r5, r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	0002      	movs	r2, r0
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	701a      	strb	r2, [r3, #0]

  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 80009ba:	250f      	movs	r5, #15
 80009bc:	197c      	adds	r4, r7, r5
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0019      	movs	r1, r3
 80009c4:	20ec      	movs	r0, #236	; 0xec
 80009c6:	f7ff ff47 	bl	8000858 <I2Cx_ReadData>
 80009ca:	0003      	movs	r3, r0
 80009cc:	7023      	strb	r3, [r4, #0]

  return res;
 80009ce:	197b      	adds	r3, r7, r5
 80009d0:	781b      	ldrb	r3, [r3, #0]

}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bdb0      	pop	{r4, r5, r7, pc}

080009da <BME280_ReadReg_U16>:

//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)

{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	0002      	movs	r2, r0
 80009e2:	6039      	str	r1, [r7, #0]
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	701a      	strb	r2, [r3, #0]

  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0019      	movs	r1, r3
 80009f0:	20ec      	movs	r0, #236	; 0xec
 80009f2:	f7ff ff67 	bl	80008c4 <I2Cx_ReadData16>

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b002      	add	sp, #8
 80009fc:	bd80      	pop	{r7, pc}

080009fe <BME280_ReadReg_S16>:

//------------------------------------------------

void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)

{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	0002      	movs	r2, r0
 8000a06:	6039      	str	r1, [r7, #0]
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	701a      	strb	r2, [r3, #0]

  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	20ec      	movs	r0, #236	; 0xec
 8000a16:	f7ff ff55 	bl	80008c4 <I2Cx_ReadData16>

}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <BME280_ReadReg_BE_U24>:
}
//------------------------------------------------

void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)

{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	0002      	movs	r2, r0
 8000a2a:	6039      	str	r1, [r7, #0]
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]

  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	0019      	movs	r1, r3
 8000a38:	20ec      	movs	r0, #236	; 0xec
 8000a3a:	f7ff ff73 	bl	8000924 <I2Cx_ReadData24>

  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	22ff      	movs	r2, #255	; 0xff
 8000a46:	401a      	ands	r2, r3
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	23ff      	movs	r3, #255	; 0xff
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	400b      	ands	r3, r1
 8000a52:	431a      	orrs	r2, r3
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	0419      	lsls	r1, r3, #16
 8000a5a:	23ff      	movs	r3, #255	; 0xff
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	400b      	ands	r3, r1
 8000a60:	4313      	orrs	r3, r2
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	0a1a      	lsrs	r2, r3, #8
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	601a      	str	r2, [r3, #0]

}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <BME280_ReadStatus>:
//------------------------------------------------

uint8_t BME280_ReadStatus(void)

{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0

  //clear unuset bits

  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8000a78:	20f3      	movs	r0, #243	; 0xf3
 8000a7a:	f7ff ff98 	bl	80009ae <BME280_ReadReg>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	0019      	movs	r1, r3
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	2209      	movs	r2, #9
 8000a86:	400a      	ands	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]

  return res;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]

}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <BME280_ReadCoefficients>:

//------------------------------------------------
void BME280_ReadCoefficients(void)

{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <BME280_ReadCoefficients+0x84>)
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	2088      	movs	r0, #136	; 0x88
 8000aa2:	f7ff ff9a 	bl	80009da <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <BME280_ReadCoefficients+0x88>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	208a      	movs	r0, #138	; 0x8a
 8000aac:	f7ff ffa7 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <BME280_ReadCoefficients+0x8c>)
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	208c      	movs	r0, #140	; 0x8c
 8000ab6:	f7ff ffa2 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <BME280_ReadCoefficients+0x90>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	208e      	movs	r0, #142	; 0x8e
 8000ac0:	f7ff ff8b 	bl	80009da <BME280_ReadReg_U16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <BME280_ReadCoefficients+0x94>)
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	2090      	movs	r0, #144	; 0x90
 8000aca:	f7ff ff98 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <BME280_ReadCoefficients+0x98>)
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	2092      	movs	r0, #146	; 0x92
 8000ad4:	f7ff ff93 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <BME280_ReadCoefficients+0x9c>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	2094      	movs	r0, #148	; 0x94
 8000ade:	f7ff ff8e 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <BME280_ReadCoefficients+0xa0>)
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	2096      	movs	r0, #150	; 0x96
 8000ae8:	f7ff ff89 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <BME280_ReadCoefficients+0xa4>)
 8000aee:	0019      	movs	r1, r3
 8000af0:	2098      	movs	r0, #152	; 0x98
 8000af2:	f7ff ff84 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <BME280_ReadCoefficients+0xa8>)
 8000af8:	0019      	movs	r1, r3
 8000afa:	209a      	movs	r0, #154	; 0x9a
 8000afc:	f7ff ff7f 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <BME280_ReadCoefficients+0xac>)
 8000b02:	0019      	movs	r1, r3
 8000b04:	209c      	movs	r0, #156	; 0x9c
 8000b06:	f7ff ff7a 	bl	80009fe <BME280_ReadReg_S16>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <BME280_ReadCoefficients+0xb0>)
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	209e      	movs	r0, #158	; 0x9e
 8000b10:	f7ff ff75 	bl	80009fe <BME280_ReadReg_S16>

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	2000002c 	.word	0x2000002c
 8000b20:	2000002e 	.word	0x2000002e
 8000b24:	20000030 	.word	0x20000030
 8000b28:	20000032 	.word	0x20000032
 8000b2c:	20000034 	.word	0x20000034
 8000b30:	20000036 	.word	0x20000036
 8000b34:	20000038 	.word	0x20000038
 8000b38:	2000003a 	.word	0x2000003a
 8000b3c:	2000003c 	.word	0x2000003c
 8000b40:	2000003e 	.word	0x2000003e
 8000b44:	20000040 	.word	0x20000040
 8000b48:	20000042 	.word	0x20000042

08000b4c <BME280_SetStandby>:

//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	0002      	movs	r2, r0
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	701a      	strb	r2, [r3, #0]

  uint8_t reg;

  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 8000b58:	20f5      	movs	r0, #245	; 0xf5
 8000b5a:	f7ff ff28 	bl	80009ae <BME280_ReadReg>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	0019      	movs	r1, r3
 8000b62:	200f      	movs	r0, #15
 8000b64:	183b      	adds	r3, r7, r0
 8000b66:	221f      	movs	r2, #31
 8000b68:	400a      	ands	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]

  reg |= tsb & BME280_STBY_MSK;
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	221f      	movs	r2, #31
 8000b74:	4393      	bics	r3, r2
 8000b76:	b25a      	sxtb	r2, r3
 8000b78:	183b      	adds	r3, r7, r0
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	183b      	adds	r3, r7, r0
 8000b84:	701a      	strb	r2, [r3, #0]

  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8000b86:	183b      	adds	r3, r7, r0
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	20f5      	movs	r0, #245	; 0xf5
 8000b8e:	f7ff fef9 	bl	8000984 <BME280_WriteReg>

}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b004      	add	sp, #16
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <BME280_SetFilter>:

//------------------------------------------------
void BME280_SetFilter(uint8_t filter) {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	701a      	strb	r2, [r3, #0]

 uint8_t reg;

 reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 8000ba6:	20f5      	movs	r0, #245	; 0xf5
 8000ba8:	f7ff ff01 	bl	80009ae <BME280_ReadReg>
 8000bac:	0003      	movs	r3, r0
 8000bae:	0019      	movs	r1, r3
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	183b      	adds	r3, r7, r0
 8000bb4:	221c      	movs	r2, #28
 8000bb6:	4391      	bics	r1, r2
 8000bb8:	000a      	movs	r2, r1
 8000bba:	701a      	strb	r2, [r3, #0]

 reg |= filter & BME280_FILTER_MSK;
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	221c      	movs	r2, #28
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	183b      	adds	r3, r7, r0
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	701a      	strb	r2, [r3, #0]

 BME280_WriteReg(BME280_REG_CONFIG,reg);
 8000bd6:	183b      	adds	r3, r7, r0
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	0019      	movs	r1, r3
 8000bdc:	20f5      	movs	r0, #245	; 0xf5
 8000bde:	f7ff fed1 	bl	8000984 <BME280_WriteReg>

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}

08000bea <BME280_SetOversamplingTemper>:

//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)

{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	701a      	strb	r2, [r3, #0]

  uint8_t reg;

  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 8000bf6:	20f4      	movs	r0, #244	; 0xf4
 8000bf8:	f7ff fed9 	bl	80009ae <BME280_ReadReg>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	0019      	movs	r1, r3
 8000c00:	200f      	movs	r0, #15
 8000c02:	183b      	adds	r3, r7, r0
 8000c04:	221f      	movs	r2, #31
 8000c06:	400a      	ands	r2, r1
 8000c08:	701a      	strb	r2, [r3, #0]

  reg |= osrs & BME280_OSRS_T_MSK;
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	221f      	movs	r2, #31
 8000c12:	4393      	bics	r3, r2
 8000c14:	b25a      	sxtb	r2, r3
 8000c16:	183b      	adds	r3, r7, r0
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b25b      	sxtb	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b25a      	sxtb	r2, r3
 8000c20:	183b      	adds	r3, r7, r0
 8000c22:	701a      	strb	r2, [r3, #0]

  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8000c24:	183b      	adds	r3, r7, r0
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	0019      	movs	r1, r3
 8000c2a:	20f4      	movs	r0, #244	; 0xf4
 8000c2c:	f7ff feaa 	bl	8000984 <BME280_WriteReg>

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <BME280_SetOversamplingPressure>:

//------------------------------------------------

void BME280_SetOversamplingPressure(uint8_t osrs)

{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	701a      	strb	r2, [r3, #0]

  uint8_t reg;

  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8000c44:	20f4      	movs	r0, #244	; 0xf4
 8000c46:	f7ff feb2 	bl	80009ae <BME280_ReadReg>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	200f      	movs	r0, #15
 8000c50:	183b      	adds	r3, r7, r0
 8000c52:	221c      	movs	r2, #28
 8000c54:	4391      	bics	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]

  reg |= osrs & BME280_OSRS_P_MSK;
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	221c      	movs	r2, #28
 8000c62:	4013      	ands	r3, r2
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	183b      	adds	r3, r7, r0
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	183b      	adds	r3, r7, r0
 8000c72:	701a      	strb	r2, [r3, #0]

  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8000c74:	183b      	adds	r3, r7, r0
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	0019      	movs	r1, r3
 8000c7a:	20f4      	movs	r0, #244	; 0xf4
 8000c7c:	f7ff fe82 	bl	8000984 <BME280_WriteReg>

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b004      	add	sp, #16
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <BME280_SetMode>:

//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	0002      	movs	r2, r0
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	701a      	strb	r2, [r3, #0]

  uint8_t reg;

  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8000c94:	20f4      	movs	r0, #244	; 0xf4
 8000c96:	f7ff fe8a 	bl	80009ae <BME280_ReadReg>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	183b      	adds	r3, r7, r0
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	4391      	bics	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]

  reg |= mode & BME280_MODE_MSK;
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	183b      	adds	r3, r7, r0
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b25a      	sxtb	r2, r3
 8000cc0:	183b      	adds	r3, r7, r0
 8000cc2:	701a      	strb	r2, [r3, #0]

  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	0019      	movs	r1, r3
 8000cca:	20f4      	movs	r0, #244	; 0xf4
 8000ccc:	f7ff fe5a 	bl	8000984 <BME280_WriteReg>

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b004      	add	sp, #16
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <BME280_ReadTemperature>:
//------------------------------------------------
//------------------------------------------------

float BME280_ReadTemperature(void)

{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0

  float temper_float = 0.0f;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  uint32_t temper_raw_unsigned;
  int32_t temper_raw;
  int32_t val1, val2;


  BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw_unsigned);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	20fa      	movs	r0, #250	; 0xfa
 8000ce8:	f7ff fe9b 	bl	8000a22 <BME280_ReadReg_BE_U24>
  temper_raw = (int32_t)temper_raw_unsigned;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	613b      	str	r3, [r7, #16]
  temper_raw >>= 4;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	111b      	asrs	r3, r3, #4
 8000cf4:	613b      	str	r3, [r7, #16]

  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	10da      	asrs	r2, r3, #3
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <BME280_ReadTemperature+0x94>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	1ad3      	subs	r3, r2, r3

  ((int32_t)CalibData.dig_T2)) >> 11;
 8000d02:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <BME280_ReadTemperature+0x94>)
 8000d04:	2102      	movs	r1, #2
 8000d06:	5e52      	ldrsh	r2, [r2, r1]
  val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8000d08:	4353      	muls	r3, r2
 8000d0a:	12db      	asrs	r3, r3, #11
 8000d0c:	60fb      	str	r3, [r7, #12]

  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	111b      	asrs	r3, r3, #4
 8000d12:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <BME280_ReadTemperature+0x94>)
 8000d14:	8812      	ldrh	r2, [r2, #0]
 8000d16:	1a9b      	subs	r3, r3, r2

  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	1112      	asrs	r2, r2, #4
 8000d1c:	4913      	ldr	r1, [pc, #76]	; (8000d6c <BME280_ReadTemperature+0x94>)
 8000d1e:	8809      	ldrh	r1, [r1, #0]
 8000d20:	1a52      	subs	r2, r2, r1
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8000d22:	4353      	muls	r3, r2
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8000d24:	131b      	asrs	r3, r3, #12

  ((int32_t)CalibData.dig_T3)) >> 14;
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <BME280_ReadTemperature+0x94>)
 8000d28:	2104      	movs	r1, #4
 8000d2a:	5e52      	ldrsh	r2, [r2, r1]
  ((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8000d2c:	4353      	muls	r3, r2
  val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8000d2e:	139b      	asrs	r3, r3, #14
 8000d30:	60bb      	str	r3, [r7, #8]

  temp_int = val1 + val2;
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	18d2      	adds	r2, r2, r3
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <BME280_ReadTemperature+0x98>)
 8000d3a:	601a      	str	r2, [r3, #0]
  temper_float = ((temp_int * 5 + 128) >> 8);
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <BME280_ReadTemperature+0x98>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	0013      	movs	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	189b      	adds	r3, r3, r2
 8000d46:	3380      	adds	r3, #128	; 0x80
 8000d48:	121b      	asrs	r3, r3, #8
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fbf0 	bl	8000530 <__aeabi_i2f>
 8000d50:	1c03      	adds	r3, r0, #0
 8000d52:	617b      	str	r3, [r7, #20]
  temper_float /= 100.0f;
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <BME280_ReadTemperature+0x9c>)
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff fad2 	bl	8000300 <__aeabi_fdiv>
 8000d5c:	1c03      	adds	r3, r0, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return temper_float;
 8000d60:	697b      	ldr	r3, [r7, #20]

}
 8000d62:	1c18      	adds	r0, r3, #0
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b006      	add	sp, #24
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	2000002c 	.word	0x2000002c
 8000d70:	20000050 	.word	0x20000050
 8000d74:	42c80000 	.word	0x42c80000

08000d78 <BME280_ReadPressure>:

//------------------------------------------------

uint32_t BME280_ReadPressure(void)

{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b0b1      	sub	sp, #196	; 0xc4
 8000d7c:	af00      	add	r7, sp, #0

  uint32_t press_raw, pres_int;

  int64_t val1, val2, p;

  BME280_ReadTemperature(); // must be done first to get t_fine
 8000d7e:	f7ff ffab 	bl	8000cd8 <BME280_ReadTemperature>

  BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8000d82:	26a0      	movs	r6, #160	; 0xa0
 8000d84:	19bb      	adds	r3, r7, r6
 8000d86:	0019      	movs	r1, r3
 8000d88:	20f7      	movs	r0, #247	; 0xf7
 8000d8a:	f7ff fe4a 	bl	8000a22 <BME280_ReadReg_BE_U24>

  press_raw >>= 4;
 8000d8e:	0032      	movs	r2, r6
 8000d90:	18bb      	adds	r3, r7, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	18ba      	adds	r2, r7, r2
 8000d98:	6013      	str	r3, [r2, #0]

  val1 = ((int64_t) temp_int) - 128000;
 8000d9a:	4b69      	ldr	r3, [pc, #420]	; (8000f40 <BME280_ReadPressure+0x1c8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	663b      	str	r3, [r7, #96]	; 0x60
 8000da0:	17db      	asrs	r3, r3, #31
 8000da2:	667b      	str	r3, [r7, #100]	; 0x64
 8000da4:	4a67      	ldr	r2, [pc, #412]	; (8000f44 <BME280_ReadPressure+0x1cc>)
 8000da6:	2301      	movs	r3, #1
 8000da8:	425b      	negs	r3, r3
 8000daa:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000dac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000dae:	1880      	adds	r0, r0, r2
 8000db0:	4159      	adcs	r1, r3
 8000db2:	0002      	movs	r2, r0
 8000db4:	000b      	movs	r3, r1
 8000db6:	26b8      	movs	r6, #184	; 0xb8
 8000db8:	19b9      	adds	r1, r7, r6
 8000dba:	600a      	str	r2, [r1, #0]
 8000dbc:	604b      	str	r3, [r1, #4]

  val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 8000dbe:	19bb      	adds	r3, r7, r6
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	19b9      	adds	r1, r7, r6
 8000dc6:	6808      	ldr	r0, [r1, #0]
 8000dc8:	6849      	ldr	r1, [r1, #4]
 8000dca:	f7ff fa4d 	bl	8000268 <__aeabi_lmul>
 8000dce:	0002      	movs	r2, r0
 8000dd0:	000b      	movs	r3, r1
 8000dd2:	0010      	movs	r0, r2
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	4b5c      	ldr	r3, [pc, #368]	; (8000f48 <BME280_ReadPressure+0x1d0>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	5e9b      	ldrsh	r3, [r3, r2]
 8000ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de6:	f7ff fa3f 	bl	8000268 <__aeabi_lmul>
 8000dea:	0002      	movs	r2, r0
 8000dec:	000b      	movs	r3, r1
 8000dee:	21b0      	movs	r1, #176	; 0xb0
 8000df0:	1878      	adds	r0, r7, r1
 8000df2:	6002      	str	r2, [r0, #0]
 8000df4:	6043      	str	r3, [r0, #4]

  val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8000df6:	4b54      	ldr	r3, [pc, #336]	; (8000f48 <BME280_ReadPressure+0x1d0>)
 8000df8:	220e      	movs	r2, #14
 8000dfa:	5e9b      	ldrsh	r3, [r3, r2]
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
 8000e02:	19bb      	adds	r3, r7, r6
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000e0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000e0c:	f7ff fa2c 	bl	8000268 <__aeabi_lmul>
 8000e10:	0002      	movs	r2, r0
 8000e12:	000b      	movs	r3, r1
 8000e14:	0bd1      	lsrs	r1, r2, #15
 8000e16:	045d      	lsls	r5, r3, #17
 8000e18:	430d      	orrs	r5, r1
 8000e1a:	0454      	lsls	r4, r2, #17
 8000e1c:	21b0      	movs	r1, #176	; 0xb0
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	1912      	adds	r2, r2, r4
 8000e26:	416b      	adcs	r3, r5
 8000e28:	1878      	adds	r0, r7, r1
 8000e2a:	6002      	str	r2, [r0, #0]
 8000e2c:	6043      	str	r3, [r0, #4]

  val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <BME280_ReadPressure+0x1d0>)
 8000e30:	220c      	movs	r2, #12
 8000e32:	5e9b      	ldrsh	r3, [r3, r2]
 8000e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e36:	17db      	asrs	r3, r3, #31
 8000e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8000e40:	2300      	movs	r3, #0
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
 8000e44:	000c      	movs	r4, r1
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000e4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000e50:	1812      	adds	r2, r2, r0
 8000e52:	414b      	adcs	r3, r1
 8000e54:	1939      	adds	r1, r7, r4
 8000e56:	600a      	str	r2, [r1, #0]
 8000e58:	604b      	str	r3, [r1, #4]

  val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 8000e5a:	19bb      	adds	r3, r7, r6
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	19b9      	adds	r1, r7, r6
 8000e62:	6808      	ldr	r0, [r1, #0]
 8000e64:	6849      	ldr	r1, [r1, #4]
 8000e66:	f7ff f9ff 	bl	8000268 <__aeabi_lmul>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	0010      	movs	r0, r2
 8000e70:	0019      	movs	r1, r3
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <BME280_ReadPressure+0x1d0>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	5e9b      	ldrsh	r3, [r3, r2]
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e82:	f7ff f9f1 	bl	8000268 <__aeabi_lmul>
 8000e86:	0002      	movs	r2, r0
 8000e88:	000b      	movs	r3, r1
 8000e8a:	0619      	lsls	r1, r3, #24
 8000e8c:	0a10      	lsrs	r0, r2, #8
 8000e8e:	2498      	movs	r4, #152	; 0x98
 8000e90:	193d      	adds	r5, r7, r4
 8000e92:	6028      	str	r0, [r5, #0]
 8000e94:	1938      	adds	r0, r7, r4
 8000e96:	6800      	ldr	r0, [r0, #0]
 8000e98:	4308      	orrs	r0, r1
 8000e9a:	1939      	adds	r1, r7, r4
 8000e9c:	6008      	str	r0, [r1, #0]
 8000e9e:	121b      	asrs	r3, r3, #8
 8000ea0:	229c      	movs	r2, #156	; 0x9c
 8000ea2:	18ba      	adds	r2, r7, r2
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <BME280_ReadPressure+0x1d0>)
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	5e9b      	ldrsh	r3, [r3, r2]
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
 8000eae:	17db      	asrs	r3, r3, #31
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb2:	19bb      	adds	r3, r7, r6
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ebc:	f7ff f9d4 	bl	8000268 <__aeabi_lmul>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	000b      	movs	r3, r1
 8000ec4:	0d11      	lsrs	r1, r2, #20
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	0318      	lsls	r0, r3, #12
 8000eca:	2594      	movs	r5, #148	; 0x94
 8000ecc:	1979      	adds	r1, r7, r5
 8000ece:	6008      	str	r0, [r1, #0]
 8000ed0:	1978      	adds	r0, r7, r5
 8000ed2:	6800      	ldr	r0, [r0, #0]
 8000ed4:	4661      	mov	r1, ip
 8000ed6:	4308      	orrs	r0, r1
 8000ed8:	1979      	adds	r1, r7, r5
 8000eda:	6008      	str	r0, [r1, #0]
 8000edc:	0313      	lsls	r3, r2, #12
 8000ede:	2190      	movs	r1, #144	; 0x90
 8000ee0:	187a      	adds	r2, r7, r1
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	1879      	adds	r1, r7, r1
 8000eec:	6808      	ldr	r0, [r1, #0]
 8000eee:	6849      	ldr	r1, [r1, #4]
 8000ef0:	1812      	adds	r2, r2, r0
 8000ef2:	414b      	adcs	r3, r1
 8000ef4:	19b9      	adds	r1, r7, r6
 8000ef6:	600a      	str	r2, [r1, #0]
 8000ef8:	604b      	str	r3, [r1, #4]

  val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8000efa:	19bb      	adds	r3, r7, r6
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	6859      	ldr	r1, [r3, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	1880      	adds	r0, r0, r2
 8000f08:	4159      	adcs	r1, r3
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <BME280_ReadPressure+0x1d0>)
 8000f0c:	88db      	ldrh	r3, [r3, #6]
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f18:	f7ff f9a6 	bl	8000268 <__aeabi_lmul>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	000b      	movs	r3, r1
 8000f20:	1059      	asrs	r1, r3, #1
 8000f22:	19b8      	adds	r0, r7, r6
 8000f24:	6001      	str	r1, [r0, #0]
 8000f26:	17db      	asrs	r3, r3, #31
 8000f28:	21bc      	movs	r1, #188	; 0xbc
 8000f2a:	187a      	adds	r2, r7, r1
 8000f2c:	6013      	str	r3, [r2, #0]

  if (val1 == 0) {
 8000f2e:	19bb      	adds	r3, r7, r6
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	d108      	bne.n	8000f4c <BME280_ReadPressure+0x1d4>

    return 0; // avoid exception caused by division by zero
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e111      	b.n	8001162 <BME280_ReadPressure+0x3ea>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	20000050 	.word	0x20000050
 8000f44:	fffe0c00 	.word	0xfffe0c00
 8000f48:	2000002c 	.word	0x2000002c

  }

  p = 1048576 - press_raw;
 8000f4c:	23a0      	movs	r3, #160	; 0xa0
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	035b      	lsls	r3, r3, #13
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	24a8      	movs	r4, #168	; 0xa8
 8000f5a:	193a      	adds	r2, r7, r4
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	25ac      	movs	r5, #172	; 0xac
 8000f62:	197a      	adds	r2, r7, r5
 8000f64:	6013      	str	r3, [r2, #0]

  p = (((p << 31) - val2) * 3125) / val1;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	07db      	lsls	r3, r3, #31
 8000f74:	623b      	str	r3, [r7, #32]
 8000f76:	20b0      	movs	r0, #176	; 0xb0
 8000f78:	183a      	adds	r2, r7, r0
 8000f7a:	6853      	ldr	r3, [r2, #4]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	6a38      	ldr	r0, [r7, #32]
 8000f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f82:	1a80      	subs	r0, r0, r2
 8000f84:	4199      	sbcs	r1, r3
 8000f86:	4a79      	ldr	r2, [pc, #484]	; (800116c <BME280_ReadPressure+0x3f4>)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f7ff f96d 	bl	8000268 <__aeabi_lmul>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	000b      	movs	r3, r1
 8000f92:	0010      	movs	r0, r2
 8000f94:	0019      	movs	r1, r3
 8000f96:	26b8      	movs	r6, #184	; 0xb8
 8000f98:	19ba      	adds	r2, r7, r6
 8000f9a:	6853      	ldr	r3, [r2, #4]
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	f7ff f93f 	bl	8000220 <__aeabi_ldivmod>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	000b      	movs	r3, r1
 8000fa6:	1939      	adds	r1, r7, r4
 8000fa8:	600a      	str	r2, [r1, #0]
 8000faa:	604b      	str	r3, [r1, #4]

  val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000fac:	4b70      	ldr	r3, [pc, #448]	; (8001170 <BME280_ReadPressure+0x3f8>)
 8000fae:	2216      	movs	r2, #22
 8000fb0:	5e9b      	ldrsh	r3, [r3, r2]
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	61fb      	str	r3, [r7, #28]
 8000fb8:	197a      	adds	r2, r7, r5
 8000fba:	6813      	ldr	r3, [r2, #0]
 8000fbc:	04da      	lsls	r2, r3, #19
 8000fbe:	1939      	adds	r1, r7, r4
 8000fc0:	680b      	ldr	r3, [r1, #0]
 8000fc2:	0b5b      	lsrs	r3, r3, #13
 8000fc4:	2188      	movs	r1, #136	; 0x88
 8000fc6:	1878      	adds	r0, r7, r1
 8000fc8:	6003      	str	r3, [r0, #0]
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	000a      	movs	r2, r1
 8000fd2:	18b9      	adds	r1, r7, r2
 8000fd4:	600b      	str	r3, [r1, #0]
 8000fd6:	1979      	adds	r1, r7, r5
 8000fd8:	680b      	ldr	r3, [r1, #0]
 8000fda:	135b      	asrs	r3, r3, #13
 8000fdc:	218c      	movs	r1, #140	; 0x8c
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	600b      	str	r3, [r1, #0]
 8000fe2:	18ba      	adds	r2, r7, r2
 8000fe4:	6853      	ldr	r3, [r2, #4]
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	69b8      	ldr	r0, [r7, #24]
 8000fea:	69f9      	ldr	r1, [r7, #28]
 8000fec:	f7ff f93c 	bl	8000268 <__aeabi_lmul>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	197a      	adds	r2, r7, r5
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	04db      	lsls	r3, r3, #19
 8000ffe:	469c      	mov	ip, r3
 8001000:	193b      	adds	r3, r7, r4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	0b5b      	lsrs	r3, r3, #13
 8001006:	2680      	movs	r6, #128	; 0x80
 8001008:	19ba      	adds	r2, r7, r6
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	19bb      	adds	r3, r7, r6
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4662      	mov	r2, ip
 8001012:	4313      	orrs	r3, r2
 8001014:	0032      	movs	r2, r6
 8001016:	18be      	adds	r6, r7, r2
 8001018:	6033      	str	r3, [r6, #0]
 800101a:	197b      	adds	r3, r7, r5
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	135b      	asrs	r3, r3, #13
 8001020:	2684      	movs	r6, #132	; 0x84
 8001022:	19be      	adds	r6, r7, r6
 8001024:	6033      	str	r3, [r6, #0]
 8001026:	18ba      	adds	r2, r7, r2
 8001028:	6853      	ldr	r3, [r2, #4]
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	f7ff f91c 	bl	8000268 <__aeabi_lmul>
 8001030:	0002      	movs	r2, r0
 8001032:	000b      	movs	r3, r1
 8001034:	01d8      	lsls	r0, r3, #7
 8001036:	0e51      	lsrs	r1, r2, #25
 8001038:	4301      	orrs	r1, r0
 800103a:	26b8      	movs	r6, #184	; 0xb8
 800103c:	19b8      	adds	r0, r7, r6
 800103e:	6001      	str	r1, [r0, #0]
 8001040:	165b      	asrs	r3, r3, #25
 8001042:	22bc      	movs	r2, #188	; 0xbc
 8001044:	18ba      	adds	r2, r7, r2
 8001046:	6013      	str	r3, [r2, #0]

  val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001048:	4b49      	ldr	r3, [pc, #292]	; (8001170 <BME280_ReadPressure+0x3f8>)
 800104a:	2214      	movs	r2, #20
 800104c:	5e9b      	ldrsh	r3, [r3, r2]
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	17db      	asrs	r3, r3, #31
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	193a      	adds	r2, r7, r4
 8001056:	6853      	ldr	r3, [r2, #4]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	6938      	ldr	r0, [r7, #16]
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	f7ff f903 	bl	8000268 <__aeabi_lmul>
 8001062:	0002      	movs	r2, r0
 8001064:	000b      	movs	r3, r1
 8001066:	0358      	lsls	r0, r3, #13
 8001068:	0cd1      	lsrs	r1, r2, #19
 800106a:	4301      	orrs	r1, r0
 800106c:	20b0      	movs	r0, #176	; 0xb0
 800106e:	1838      	adds	r0, r7, r0
 8001070:	6001      	str	r1, [r0, #0]
 8001072:	14db      	asrs	r3, r3, #19
 8001074:	22b4      	movs	r2, #180	; 0xb4
 8001076:	18ba      	adds	r2, r7, r2
 8001078:	6013      	str	r3, [r2, #0]

  p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 800107a:	193a      	adds	r2, r7, r4
 800107c:	6810      	ldr	r0, [r2, #0]
 800107e:	6851      	ldr	r1, [r2, #4]
 8001080:	19ba      	adds	r2, r7, r6
 8001082:	6853      	ldr	r3, [r2, #4]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	1880      	adds	r0, r0, r2
 8001088:	4159      	adcs	r1, r3
 800108a:	23b0      	movs	r3, #176	; 0xb0
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	1812      	adds	r2, r2, r0
 8001094:	414b      	adcs	r3, r1
 8001096:	0619      	lsls	r1, r3, #24
 8001098:	0a10      	lsrs	r0, r2, #8
 800109a:	67b8      	str	r0, [r7, #120]	; 0x78
 800109c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800109e:	4308      	orrs	r0, r1
 80010a0:	67b8      	str	r0, [r7, #120]	; 0x78
 80010a2:	121b      	asrs	r3, r3, #8
 80010a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010a6:	4b32      	ldr	r3, [pc, #200]	; (8001170 <BME280_ReadPressure+0x3f8>)
 80010a8:	2212      	movs	r2, #18
 80010aa:	5e9b      	ldrsh	r3, [r3, r2]
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	17db      	asrs	r3, r3, #31
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	000b      	movs	r3, r1
 80010b8:	0f1b      	lsrs	r3, r3, #28
 80010ba:	0010      	movs	r0, r2
 80010bc:	0100      	lsls	r0, r0, #4
 80010be:	6778      	str	r0, [r7, #116]	; 0x74
 80010c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80010c2:	4318      	orrs	r0, r3
 80010c4:	6778      	str	r0, [r7, #116]	; 0x74
 80010c6:	000b      	movs	r3, r1
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	673b      	str	r3, [r7, #112]	; 0x70
 80010cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80010ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010d0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80010d2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80010d4:	1812      	adds	r2, r2, r0
 80010d6:	414b      	adcs	r3, r1
 80010d8:	1939      	adds	r1, r7, r4
 80010da:	600a      	str	r2, [r1, #0]
 80010dc:	604b      	str	r3, [r1, #4]

  pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 80010de:	197b      	adds	r3, r7, r5
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	061b      	lsls	r3, r3, #24
 80010e4:	0021      	movs	r1, r4
 80010e6:	193a      	adds	r2, r7, r4
 80010e8:	6812      	ldr	r2, [r2, #0]
 80010ea:	0a12      	lsrs	r2, r2, #8
 80010ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80010ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80010f0:	431a      	orrs	r2, r3
 80010f2:	66ba      	str	r2, [r7, #104]	; 0x68
 80010f4:	197b      	adds	r3, r7, r5
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	121b      	asrs	r3, r3, #8
 80010fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80010fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80010fe:	0013      	movs	r3, r2
 8001100:	015b      	lsls	r3, r3, #5
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	189b      	adds	r3, r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	001c      	movs	r4, r3
 800110c:	187b      	adds	r3, r7, r1
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	4013      	ands	r3, r2
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	197b      	adds	r3, r7, r5
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	4013      	ands	r3, r2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <BME280_ReadPressure+0x3fc>)
 8001122:	2300      	movs	r3, #0
 8001124:	6838      	ldr	r0, [r7, #0]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f7ff f89e 	bl	8000268 <__aeabi_lmul>
 800112c:	0002      	movs	r2, r0
 800112e:	000b      	movs	r3, r1
 8001130:	0010      	movs	r0, r2
 8001132:	0019      	movs	r1, r3
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <BME280_ReadPressure+0x400>)
 8001136:	2300      	movs	r3, #0
 8001138:	f7ff f872 	bl	8000220 <__aeabi_ldivmod>
 800113c:	0002      	movs	r2, r0
 800113e:	000b      	movs	r3, r1
 8001140:	0013      	movs	r3, r2
 8001142:	18e3      	adds	r3, r4, r3
 8001144:	24a4      	movs	r4, #164	; 0xa4
 8001146:	193a      	adds	r2, r7, r4
 8001148:	6013      	str	r3, [r2, #0]
  pres_int /= 1000;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	22fa      	movs	r2, #250	; 0xfa
 8001150:	0091      	lsls	r1, r2, #2
 8001152:	0018      	movs	r0, r3
 8001154:	f7fe ffd8 	bl	8000108 <__udivsi3>
 8001158:	0003      	movs	r3, r0
 800115a:	193a      	adds	r2, r7, r4
 800115c:	6013      	str	r3, [r2, #0]

  //press_float = pres_int / 1000.0f;

  //return press_float;
  return pres_int;
 800115e:	193b      	adds	r3, r7, r4
 8001160:	681b      	ldr	r3, [r3, #0]

}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b031      	add	sp, #196	; 0xc4
 8001168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	00000c35 	.word	0x00000c35
 8001170:	2000002c 	.word	0x2000002c
 8001174:	0005f5e1 	.word	0x0005f5e1
 8001178:	000186a0 	.word	0x000186a0

0800117c <BME280_GetStatus>:

}

//------------------------------------------------
ErrorStatusTypeDef BME280_GetStatus(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	return bme280_status;
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <BME280_GetStatus+0x10>)
 8001182:	781b      	ldrb	r3, [r3, #0]
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000054 	.word	0x20000054

08001190 <BME280_Init>:
//------------------------------------------------

void BME280_Init(void)

{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0

  uint8_t value=0;
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]

  //uint32_t value32=0;

  //LED_ON;
  value = BME280_ReadReg(BME280_REG_ID);
 800119c:	1dfc      	adds	r4, r7, #7
 800119e:	20d0      	movs	r0, #208	; 0xd0
 80011a0:	f7ff fc05 	bl	80009ae <BME280_ReadReg>
 80011a4:	0003      	movs	r3, r0
 80011a6:	7023      	strb	r3, [r4, #0]
  //sprintf(str1, "rnrnID: 0x%02Xrn", value);

  //HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);

  if(value !=BME280_ID)
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b60      	cmp	r3, #96	; 0x60
 80011ae:	d003      	beq.n	80011b8 <BME280_Init+0x28>

  {
	bme280_status = ID_Err;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <BME280_Init+0x6c>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
    return;
 80011b6:	e01d      	b.n	80011f4 <BME280_Init+0x64>
  }
  BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 80011b8:	21b6      	movs	r1, #182	; 0xb6
 80011ba:	20e0      	movs	r0, #224	; 0xe0
 80011bc:	f7ff fbe2 	bl	8000984 <BME280_WriteReg>
  while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	f7ff fc56 	bl	8000a72 <BME280_ReadStatus>
 80011c6:	0003      	movs	r3, r0
 80011c8:	001a      	movs	r2, r3
 80011ca:	2301      	movs	r3, #1
 80011cc:	4013      	ands	r3, r2
 80011ce:	d1f8      	bne.n	80011c2 <BME280_Init+0x32>
  BME280_ReadCoefficients();
 80011d0:	f7ff fc62 	bl	8000a98 <BME280_ReadCoefficients>
  BME280_SetStandby(BME280_STBY_1000);
 80011d4:	20a0      	movs	r0, #160	; 0xa0
 80011d6:	f7ff fcb9 	bl	8000b4c <BME280_SetStandby>
  BME280_SetFilter(BME280_FILTER_4);
 80011da:	2008      	movs	r0, #8
 80011dc:	f7ff fcdd 	bl	8000b9a <BME280_SetFilter>
  BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 80011e0:	2060      	movs	r0, #96	; 0x60
 80011e2:	f7ff fd02 	bl	8000bea <BME280_SetOversamplingTemper>

  BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 80011e6:	2008      	movs	r0, #8
 80011e8:	f7ff fd26 	bl	8000c38 <BME280_SetOversamplingPressure>

  //BME280_SetOversamplingHum(BME280_OSRS_H_x1);
  //value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);

  //value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
  BME280_SetMode(BME280_MODE_NORMAL);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f7ff fd4b 	bl	8000c88 <BME280_SetMode>

  return;
 80011f2:	46c0      	nop			; (mov r8, r8)
}
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b003      	add	sp, #12
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	20000054 	.word	0x20000054

08001200 <DelayMicro>:

//------------------------------------------------

__STATIC_INLINE void DelayMicro(__IO uint32_t micros)

{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  micros *= (SystemCoreClock / 1000000) / 3;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <DelayMicro+0x34>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	490a      	ldr	r1, [pc, #40]	; (8001238 <DelayMicro+0x38>)
 800120e:	0018      	movs	r0, r3
 8001210:	f7fe ff7a 	bl	8000108 <__udivsi3>
 8001214:	0003      	movs	r3, r0
 8001216:	001a      	movs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4353      	muls	r3, r2
 800121c:	607b      	str	r3, [r7, #4]

  /* Wait till done */

  while (micros--) ;
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1fa      	bne.n	8001220 <DelayMicro+0x20>

}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000004 	.word	0x20000004
 8001238:	002dc6c0 	.word	0x002dc6c0

0800123c <NRF24_ReadReg>:

//--------------------------------------------------

uint8_t NRF24_ReadReg(uint8_t addr)

{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af02      	add	r7, sp, #8
 8001242:	0002      	movs	r2, r0
 8001244:	1dfb      	adds	r3, r7, #7
 8001246:	701a      	strb	r2, [r3, #0]

  uint8_t dt=0, cmd;
 8001248:	240f      	movs	r4, #15
 800124a:	193b      	adds	r3, r7, r4
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

  CS_ON;
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	0119      	lsls	r1, r3, #4
 8001254:	2390      	movs	r3, #144	; 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	2200      	movs	r2, #0
 800125a:	0018      	movs	r0, r3
 800125c:	f000 ffb4 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8001260:	193a      	adds	r2, r7, r4
 8001262:	1df9      	adds	r1, r7, #7
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <NRF24_ReadReg+0x78>)
 8001266:	23fa      	movs	r3, #250	; 0xfa
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2301      	movs	r3, #1
 800126e:	f002 fe3d 	bl	8003eec <HAL_SPI_TransmitReceive>

  if (addr!=STATUS)//если адрес равен адрес регистра статус то и возварщаем его состояние
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b07      	cmp	r3, #7
 8001278:	d00c      	beq.n	8001294 <NRF24_ReadReg+0x58>

  {

    cmd=0xFF;
 800127a:	210e      	movs	r1, #14
 800127c:	187b      	adds	r3, r7, r1
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	701a      	strb	r2, [r3, #0]

    HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8001282:	193a      	adds	r2, r7, r4
 8001284:	1879      	adds	r1, r7, r1
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <NRF24_ReadReg+0x78>)
 8001288:	23fa      	movs	r3, #250	; 0xfa
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	f002 fe2c 	bl	8003eec <HAL_SPI_TransmitReceive>

  }

  CS_OFF;
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	0119      	lsls	r1, r3, #4
 8001298:	2390      	movs	r3, #144	; 0x90
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	2201      	movs	r2, #1
 800129e:	0018      	movs	r0, r3
 80012a0:	f000 ff92 	bl	80021c8 <HAL_GPIO_WritePin>

  return dt;
 80012a4:	230f      	movs	r3, #15
 80012a6:	18fb      	adds	r3, r7, r3
 80012a8:	781b      	ldrb	r3, [r3, #0]

}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b005      	add	sp, #20
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	200000b4 	.word	0x200000b4

080012b8 <NRF24_WriteReg>:

//------------------------------------------------

void NRF24_WriteReg(uint8_t addr, uint8_t dt)

{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	0002      	movs	r2, r0
 80012c0:	1dfb      	adds	r3, r7, #7
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	1dbb      	adds	r3, r7, #6
 80012c6:	1c0a      	adds	r2, r1, #0
 80012c8:	701a      	strb	r2, [r3, #0]

  addr |= W_REGISTER;//включим бит записи в адрес
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2220      	movs	r2, #32
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	701a      	strb	r2, [r3, #0]

  CS_ON;
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	0119      	lsls	r1, r3, #4
 80012dc:	2390      	movs	r3, #144	; 0x90
 80012de:	05db      	lsls	r3, r3, #23
 80012e0:	2200      	movs	r2, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 ff70 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 80012e8:	23fa      	movs	r3, #250	; 0xfa
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	1df9      	adds	r1, r7, #7
 80012ee:	480b      	ldr	r0, [pc, #44]	; (800131c <NRF24_WriteReg+0x64>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	f002 fb57 	bl	80039a4 <HAL_SPI_Transmit>

  HAL_SPI_Transmit(&hspi1,&dt,1,1000);//отправим данные в шину
 80012f6:	23fa      	movs	r3, #250	; 0xfa
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	1db9      	adds	r1, r7, #6
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <NRF24_WriteReg+0x64>)
 80012fe:	2201      	movs	r2, #1
 8001300:	f002 fb50 	bl	80039a4 <HAL_SPI_Transmit>

  CS_OFF;
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	0119      	lsls	r1, r3, #4
 8001308:	2390      	movs	r3, #144	; 0x90
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	2201      	movs	r2, #1
 800130e:	0018      	movs	r0, r3
 8001310:	f000 ff5a 	bl	80021c8 <HAL_GPIO_WritePin>

}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	b002      	add	sp, #8
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000b4 	.word	0x200000b4

08001320 <NRF24_ToggleFeatures>:

//------------------------------------------------

void NRF24_ToggleFeatures(void)

{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0

  uint8_t dt[1] = {ACTIVATE};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4a15      	ldr	r2, [pc, #84]	; (8001380 <NRF24_ToggleFeatures+0x60>)
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	701a      	strb	r2, [r3, #0]

  CS_ON;
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	0119      	lsls	r1, r3, #4
 8001332:	2390      	movs	r3, #144	; 0x90
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	2200      	movs	r2, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f000 ff45 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 800133e:	23fa      	movs	r3, #250	; 0xfa
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	1d39      	adds	r1, r7, #4
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <NRF24_ToggleFeatures+0x64>)
 8001346:	2201      	movs	r2, #1
 8001348:	f002 fb2c 	bl	80039a4 <HAL_SPI_Transmit>

  DelayMicro(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff ff57 	bl	8001200 <DelayMicro>

  dt[0] = 0x73;
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2273      	movs	r2, #115	; 0x73
 8001356:	701a      	strb	r2, [r3, #0]

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001358:	23fa      	movs	r3, #250	; 0xfa
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	1d39      	adds	r1, r7, #4
 800135e:	4809      	ldr	r0, [pc, #36]	; (8001384 <NRF24_ToggleFeatures+0x64>)
 8001360:	2201      	movs	r2, #1
 8001362:	f002 fb1f 	bl	80039a4 <HAL_SPI_Transmit>

  CS_OFF;
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	0119      	lsls	r1, r3, #4
 800136a:	2390      	movs	r3, #144	; 0x90
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	2201      	movs	r2, #1
 8001370:	0018      	movs	r0, r3
 8001372:	f000 ff29 	bl	80021c8 <HAL_GPIO_WritePin>

}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	b002      	add	sp, #8
 800137c:	bd80      	pop	{r7, pc}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	080046a8 	.word	0x080046a8
 8001384:	200000b4 	.word	0x200000b4

08001388 <NRF24_Read_Buf>:

//-----------------------------------------------

void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)

{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6039      	str	r1, [r7, #0]
 8001390:	0011      	movs	r1, r2
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	1c02      	adds	r2, r0, #0
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	1c0a      	adds	r2, r1, #0
 800139c:	701a      	strb	r2, [r3, #0]

  CS_ON;
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	0119      	lsls	r1, r3, #4
 80013a2:	2390      	movs	r3, #144	; 0x90
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	2200      	movs	r2, #0
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 ff0d 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 80013ae:	23fa      	movs	r3, #250	; 0xfa
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	1df9      	adds	r1, r7, #7
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <NRF24_Read_Buf+0x60>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	f002 faf4 	bl	80039a4 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);//отправим данные в буфер
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	23fa      	movs	r3, #250	; 0xfa
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <NRF24_Read_Buf+0x60>)
 80013ca:	f002 fc43 	bl	8003c54 <HAL_SPI_Receive>

  CS_OFF;
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	0119      	lsls	r1, r3, #4
 80013d2:	2390      	movs	r3, #144	; 0x90
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	2201      	movs	r2, #1
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 fef5 	bl	80021c8 <HAL_GPIO_WritePin>

}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	200000b4 	.word	0x200000b4

080013ec <NRF24_Write_Buf>:

//------------------------------------------------

void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)

{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6039      	str	r1, [r7, #0]
 80013f4:	0011      	movs	r1, r2
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	1c02      	adds	r2, r0, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	1c0a      	adds	r2, r1, #0
 8001400:	701a      	strb	r2, [r3, #0]

  addr |= W_REGISTER;//включим бит записи в адрес
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2220      	movs	r2, #32
 8001408:	4313      	orrs	r3, r2
 800140a:	b2da      	uxtb	r2, r3
 800140c:	1dfb      	adds	r3, r7, #7
 800140e:	701a      	strb	r2, [r3, #0]

  CS_ON;
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	0119      	lsls	r1, r3, #4
 8001414:	2390      	movs	r3, #144	; 0x90
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	2200      	movs	r2, #0
 800141a:	0018      	movs	r0, r3
 800141c:	f000 fed4 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,&addr,1,1000);//отправим адрес в шину
 8001420:	23fa      	movs	r3, #250	; 0xfa
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	1df9      	adds	r1, r7, #7
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <NRF24_Write_Buf+0x74>)
 8001428:	2201      	movs	r2, #1
 800142a:	f002 fabb 	bl	80039a4 <HAL_SPI_Transmit>

  DelayMicro(1);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff fee6 	bl	8001200 <DelayMicro>

  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);//отправим данные в буфер
 8001434:	1dbb      	adds	r3, r7, #6
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b29a      	uxth	r2, r3
 800143a:	23fa      	movs	r3, #250	; 0xfa
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <NRF24_Write_Buf+0x74>)
 8001442:	f002 faaf 	bl	80039a4 <HAL_SPI_Transmit>

  CS_OFF;
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	0119      	lsls	r1, r3, #4
 800144a:	2390      	movs	r3, #144	; 0x90
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	2201      	movs	r2, #1
 8001450:	0018      	movs	r0, r3
 8001452:	f000 feb9 	bl	80021c8 <HAL_GPIO_WritePin>

}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	200000b4 	.word	0x200000b4

08001464 <NRF24_FlushRX>:

//------------------------------------------------

void NRF24_FlushRX(void)

{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  uint8_t dt[1] = {FLUSH_RX};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <NRF24_FlushRX+0x4c>)
 800146e:	7812      	ldrb	r2, [r2, #0]
 8001470:	701a      	strb	r2, [r3, #0]

  CS_ON;
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	0119      	lsls	r1, r3, #4
 8001476:	2390      	movs	r3, #144	; 0x90
 8001478:	05db      	lsls	r3, r3, #23
 800147a:	2200      	movs	r2, #0
 800147c:	0018      	movs	r0, r3
 800147e:	f000 fea3 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001482:	23fa      	movs	r3, #250	; 0xfa
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	1d39      	adds	r1, r7, #4
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <NRF24_FlushRX+0x50>)
 800148a:	2201      	movs	r2, #1
 800148c:	f002 fa8a 	bl	80039a4 <HAL_SPI_Transmit>

  DelayMicro(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff feb5 	bl	8001200 <DelayMicro>

  CS_OFF;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	0119      	lsls	r1, r3, #4
 800149a:	2390      	movs	r3, #144	; 0x90
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	2201      	movs	r2, #1
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 fe91 	bl	80021c8 <HAL_GPIO_WritePin>

}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	080046ac 	.word	0x080046ac
 80014b4:	200000b4 	.word	0x200000b4

080014b8 <NRF24_FlushTX>:

//------------------------------------------------

void NRF24_FlushTX(void)

{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  uint8_t dt[1] = {FLUSH_TX};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4a10      	ldr	r2, [pc, #64]	; (8001504 <NRF24_FlushTX+0x4c>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	701a      	strb	r2, [r3, #0]

  CS_ON;
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	0119      	lsls	r1, r3, #4
 80014ca:	2390      	movs	r3, #144	; 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	2200      	movs	r2, #0
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 fe79 	bl	80021c8 <HAL_GPIO_WritePin>

  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80014d6:	23fa      	movs	r3, #250	; 0xfa
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	1d39      	adds	r1, r7, #4
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <NRF24_FlushTX+0x50>)
 80014de:	2201      	movs	r2, #1
 80014e0:	f002 fa60 	bl	80039a4 <HAL_SPI_Transmit>

  DelayMicro(1);
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fe8b 	bl	8001200 <DelayMicro>

  CS_OFF;
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	0119      	lsls	r1, r3, #4
 80014ee:	2390      	movs	r3, #144	; 0x90
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	2201      	movs	r2, #1
 80014f4:	0018      	movs	r0, r3
 80014f6:	f000 fe67 	bl	80021c8 <HAL_GPIO_WritePin>

}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	080046b0 	.word	0x080046b0
 8001508:	200000b4 	.word	0x200000b4

0800150c <NRF24L01_RX_Mode>:

//------------------------------------------------

void NRF24L01_RX_Mode(void)

{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0

  uint8_t regval=0x00;
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

  regval = NRF24_ReadReg(CONFIG);
 8001518:	1dfc      	adds	r4, r7, #7
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fe8e 	bl	800123c <NRF24_ReadReg>
 8001520:	0003      	movs	r3, r0
 8001522:	7023      	strb	r3, [r4, #0]

  //разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX

  regval |= (1<<PWR_UP)|(1<<PRIM_RX);
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	1dfa      	adds	r2, r7, #7
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	2103      	movs	r1, #3
 800152c:	430a      	orrs	r2, r1
 800152e:	701a      	strb	r2, [r3, #0]

  NRF24_WriteReg(CONFIG,regval);
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	0019      	movs	r1, r3
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff febe 	bl	80012b8 <NRF24_WriteReg>

  CE_SET;
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	0159      	lsls	r1, r3, #5
 8001540:	2390      	movs	r3, #144	; 0x90
 8001542:	05db      	lsls	r3, r3, #23
 8001544:	2201      	movs	r2, #1
 8001546:	0018      	movs	r0, r3
 8001548:	f000 fe3e 	bl	80021c8 <HAL_GPIO_WritePin>

  DelayMicro(150); //Задержка минимум 130 мкс
 800154c:	2096      	movs	r0, #150	; 0x96
 800154e:	f7ff fe57 	bl	8001200 <DelayMicro>

  // Flush buffers

  NRF24_FlushRX();
 8001552:	f7ff ff87 	bl	8001464 <NRF24_FlushRX>

  NRF24_FlushTX();
 8001556:	f7ff ffaf 	bl	80014b8 <NRF24_FlushTX>

}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b003      	add	sp, #12
 8001560:	bd90      	pop	{r4, r7, pc}
	...

08001564 <NRF24L01_Receive>:

}
//-----------------------------------------------
void NRF24L01_Receive(void)

{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0

	 //char val_str1[5];
	 //char val_str2[5];


  uint8_t status=0x0;
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
  uint8_t FIFO_stat = 0;
 8001570:	1dbb      	adds	r3, r7, #6
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
  //HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
  //LED_TGL;

  //DelayMicro(10);

  status = NRF24_ReadReg(STATUS);
 8001576:	1dfc      	adds	r4, r7, #7
 8001578:	2007      	movs	r0, #7
 800157a:	f7ff fe5f 	bl	800123c <NRF24_ReadReg>
 800157e:	0003      	movs	r3, r0
 8001580:	7023      	strb	r3, [r4, #0]
  //pressure[0] = 0;

  //if(status & 0x40)

  //{
  	FIFO_stat = NRF24_ReadReg(FIFO_STATUS);
 8001582:	1dbc      	adds	r4, r7, #6
 8001584:	2017      	movs	r0, #23
 8001586:	f7ff fe59 	bl	800123c <NRF24_ReadReg>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
  	//if (!(FIFO_stat & 0x1))
  	//{

  		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <NRF24L01_Receive+0x4c>)
 8001590:	2205      	movs	r2, #5
 8001592:	0019      	movs	r1, r3
 8001594:	2061      	movs	r0, #97	; 0x61
 8001596:	f7ff fef7 	bl	8001388 <NRF24_Read_Buf>
    //buf1[2]=RX_PL_WID;
  	//if ((FIFO_stat & 0x10))
	//{

  		//NRF24_Read_Buf(R_RX_PL_WID, &RX_PL_WID,1);
  		NRF24_Write_Buf(WR_ACK_PLOAD_P1,buf1,TX_PLOAD_WIDTH);
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <NRF24L01_Receive+0x50>)
 800159c:	2205      	movs	r2, #5
 800159e:	0019      	movs	r1, r3
 80015a0:	20a9      	movs	r0, #169	; 0xa9
 80015a2:	f7ff ff23 	bl	80013ec <NRF24_Write_Buf>
    //NumberL_7219(dt);
	//Main_Screen(val_str1, val_str2, "0.000", "0.000");
    //NRF24_WriteReg(STATUS, 0x40);
  //}
  //return dt;
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b003      	add	sp, #12
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	20000058 	.word	0x20000058
 80015b4:	200000ac 	.word	0x200000ac

080015b8 <NRF24L01_IT>:
//--------------------------------------------------
void NRF24L01_IT(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
	 uint8_t status=0x00;
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
	 //int16_t val = 0;
	 status = NRF24_ReadReg(STATUS);
 80015c4:	1dfc      	adds	r4, r7, #7
 80015c6:	2007      	movs	r0, #7
 80015c8:	f7ff fe38 	bl	800123c <NRF24_ReadReg>
 80015cc:	0003      	movs	r3, r0
 80015ce:	7023      	strb	r3, [r4, #0]
	 //DelayMicro(10);
	 if(status & RX_DR)
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2240      	movs	r2, #64	; 0x40
 80015d6:	4013      	ands	r3, r2
 80015d8:	d00f      	beq.n	80015fa <NRF24L01_IT+0x42>
	 {
		 NRF24L01_Receive();
 80015da:	f7ff ffc3 	bl	8001564 <NRF24L01_Receive>
		 NRF24_WriteReg(STATUS, RX_DR);
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	2007      	movs	r0, #7
 80015e2:	f7ff fe69 	bl	80012b8 <NRF24_WriteReg>
		 if (status & TX_DS)
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2220      	movs	r2, #32
 80015ec:	4013      	ands	r3, r2
 80015ee:	d00d      	beq.n	800160c <NRF24L01_IT+0x54>
		 {
		 NRF24_WriteReg(STATUS, TX_DS);
 80015f0:	2120      	movs	r1, #32
 80015f2:	2007      	movs	r0, #7
 80015f4:	f7ff fe60 	bl	80012b8 <NRF24_WriteReg>
	 }
	 else if (status & TX_DS)
	 {
		 NRF24_WriteReg(STATUS, TX_DS);
	 }
	}
 80015f8:	e008      	b.n	800160c <NRF24L01_IT+0x54>
	 else if (status & TX_DS)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	4013      	ands	r3, r2
 8001602:	d003      	beq.n	800160c <NRF24L01_IT+0x54>
		 NRF24_WriteReg(STATUS, TX_DS);
 8001604:	2120      	movs	r1, #32
 8001606:	2007      	movs	r0, #7
 8001608:	f7ff fe56 	bl	80012b8 <NRF24_WriteReg>
	}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b003      	add	sp, #12
 8001612:	bd90      	pop	{r4, r7, pc}

08001614 <NRF24_ini>:
//--------------------------------------------------
void NRF24_ini(void)

{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	  CE_RESET;
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	0159      	lsls	r1, r3, #5
 800161c:	2390      	movs	r3, #144	; 0x90
 800161e:	05db      	lsls	r3, r3, #23
 8001620:	2200      	movs	r2, #0
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fdd0 	bl	80021c8 <HAL_GPIO_WritePin>
	  DelayMicro(5000);
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <NRF24_ini+0x9c>)
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff fde8 	bl	8001200 <DelayMicro>
	  NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001630:	210a      	movs	r1, #10
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fe40 	bl	80012b8 <NRF24_WriteReg>
	  DelayMicro(5000);
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <NRF24_ini+0x9c>)
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff fde0 	bl	8001200 <DelayMicro>

	  NRF24_WriteReg(EN_AA, 0x07); // Enable Pipe1 and Pipe2
 8001640:	2107      	movs	r1, #7
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff fe38 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(EN_RXADDR, 0x06); // Enable Pipe1 and Pipe2
 8001648:	2106      	movs	r1, #6
 800164a:	2002      	movs	r0, #2
 800164c:	f7ff fe34 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(SETUP_AW, 0x01); // Setup address width=3 bytes
 8001650:	2101      	movs	r1, #1
 8001652:	2003      	movs	r0, #3
 8001654:	f7ff fe30 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(SETUP_RETR, 0x5F); // // 1500us, 15 retrans
 8001658:	215f      	movs	r1, #95	; 0x5f
 800165a:	2004      	movs	r0, #4
 800165c:	f7ff fe2c 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_ToggleFeatures();
 8001660:	f7ff fe5e 	bl	8001320 <NRF24_ToggleFeatures>
	  NRF24_WriteReg(FEATURE, 0x6);
 8001664:	2106      	movs	r1, #6
 8001666:	201d      	movs	r0, #29
 8001668:	f7ff fe26 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(DYNPD, 0x7);
 800166c:	2107      	movs	r1, #7
 800166e:	201c      	movs	r0, #28
 8001670:	f7ff fe22 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(STATUS, 0x70); //Reset flags for IRQ
 8001674:	2170      	movs	r1, #112	; 0x70
 8001676:	2007      	movs	r0, #7
 8001678:	f7ff fe1e 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(RF_CH, 70); // частота 2525 MHz
 800167c:	2146      	movs	r1, #70	; 0x46
 800167e:	2005      	movs	r0, #5
 8001680:	f7ff fe1a 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_WriteReg(RF_SETUP, 0x26); //TX_PWR:0dBm, Datarate:1Mbps
 8001684:	2126      	movs	r1, #38	; 0x26
 8001686:	2006      	movs	r0, #6
 8001688:	f7ff fe16 	bl	80012b8 <NRF24_WriteReg>
	  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <NRF24_ini+0xa0>)
 800168e:	2203      	movs	r2, #3
 8001690:	0019      	movs	r1, r3
 8001692:	2010      	movs	r0, #16
 8001694:	f7ff feaa 	bl	80013ec <NRF24_Write_Buf>
	  NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS, TX_ADR_WIDTH);
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <NRF24_ini+0xa0>)
 800169a:	2203      	movs	r2, #3
 800169c:	0019      	movs	r1, r3
 800169e:	200b      	movs	r0, #11
 80016a0:	f7ff fea4 	bl	80013ec <NRF24_Write_Buf>
	  //NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 1
	  //NRF24_WriteReg(RX_PW_P2, TX_PLOAD_WIDTH); //Number of bytes in RX payload in data pipe 2
	  NRF24L01_RX_Mode();
 80016a4:	f7ff ff32 	bl	800150c <NRF24L01_RX_Mode>
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	00001388 	.word	0x00001388
 80016b4:	20000000 	.word	0x20000000

080016b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	240c      	movs	r4, #12
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	0018      	movs	r0, r3
 80016c4:	2314      	movs	r3, #20
 80016c6:	001a      	movs	r2, r3
 80016c8:	2100      	movs	r1, #0
 80016ca:	f002 ffd9 	bl	8004680 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <MX_GPIO_Init+0x11c>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <MX_GPIO_Init+0x11c>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	03c9      	lsls	r1, r1, #15
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <MX_GPIO_Init+0x11c>)
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	03db      	lsls	r3, r3, #15
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <MX_GPIO_Init+0x11c>)
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <MX_GPIO_Init+0x11c>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0289      	lsls	r1, r1, #10
 80016f4:	430a      	orrs	r2, r1
 80016f6:	615a      	str	r2, [r3, #20]
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <MX_GPIO_Init+0x11c>)
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	029b      	lsls	r3, r3, #10
 8001700:	4013      	ands	r3, r2
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b33      	ldr	r3, [pc, #204]	; (80017d4 <MX_GPIO_Init+0x11c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	4b32      	ldr	r3, [pc, #200]	; (80017d4 <MX_GPIO_Init+0x11c>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	02c9      	lsls	r1, r1, #11
 8001710:	430a      	orrs	r2, r1
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <MX_GPIO_Init+0x11c>)
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	02db      	lsls	r3, r3, #11
 800171c:	4013      	ands	r3, r2
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001722:	23c0      	movs	r3, #192	; 0xc0
 8001724:	0159      	lsls	r1, r3, #5
 8001726:	2390      	movs	r3, #144	; 0x90
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	2200      	movs	r2, #0
 800172c:	0018      	movs	r0, r3
 800172e:	f000 fd4b 	bl	80021c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2284      	movs	r2, #132	; 0x84
 800173c:	0392      	lsls	r2, r2, #14
 800173e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	193b      	adds	r3, r7, r4
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	193a      	adds	r2, r7, r4
 8001748:	2390      	movs	r3, #144	; 0x90
 800174a:	05db      	lsls	r3, r3, #23
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f000 fbca 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001754:	193b      	adds	r3, r7, r4
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <MX_GPIO_Init+0x120>)
 8001758:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175a:	193b      	adds	r3, r7, r4
 800175c:	2203      	movs	r2, #3
 800175e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	193b      	adds	r3, r7, r4
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	193a      	adds	r2, r7, r4
 8001768:	2390      	movs	r3, #144	; 0x90
 800176a:	05db      	lsls	r3, r3, #23
 800176c:	0011      	movs	r1, r2
 800176e:	0018      	movs	r0, r3
 8001770:	f000 fbba 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001774:	193b      	adds	r3, r7, r4
 8001776:	223b      	movs	r2, #59	; 0x3b
 8001778:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	193b      	adds	r3, r7, r4
 800177c:	2203      	movs	r2, #3
 800177e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	193b      	adds	r3, r7, r4
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	193b      	adds	r3, r7, r4
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <MX_GPIO_Init+0x124>)
 800178a:	0019      	movs	r1, r3
 800178c:	0010      	movs	r0, r2
 800178e:	f000 fbab 	bl	8001ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001792:	0021      	movs	r1, r4
 8001794:	187b      	adds	r3, r7, r1
 8001796:	22c0      	movs	r2, #192	; 0xc0
 8001798:	0152      	lsls	r2, r2, #5
 800179a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2201      	movs	r2, #1
 80017a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	187a      	adds	r2, r7, r1
 80017b0:	2390      	movs	r3, #144	; 0x90
 80017b2:	05db      	lsls	r3, r3, #23
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 fb96 	bl	8001ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2005      	movs	r0, #5
 80017c2:	f000 fb5f 	bl	8001e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80017c6:	2005      	movs	r0, #5
 80017c8:	f000 fb71 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b009      	add	sp, #36	; 0x24
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	0000871e 	.word	0x0000871e
 80017dc:	48000400 	.word	0x48000400

080017e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_I2C1_Init+0x74>)
 80017e6:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <MX_I2C1_Init+0x78>)
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_I2C1_Init+0x74>)
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <MX_I2C1_Init+0x7c>)
 80017ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_I2C1_Init+0x74>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_I2C1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_I2C1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_I2C1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_I2C1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_I2C1_Init+0x74>)
 800181c:	0018      	movs	r0, r3
 800181e:	f000 fd0d 	bl	800223c <HAL_I2C_Init>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001826:	f000 f91c 	bl	8001a62 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <MX_I2C1_Init+0x74>)
 800182c:	2100      	movs	r1, #0
 800182e:	0018      	movs	r0, r3
 8001830:	f001 fa4e 	bl	8002cd0 <HAL_I2CEx_ConfigAnalogFilter>
 8001834:	1e03      	subs	r3, r0, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001838:	f000 f913 	bl	8001a62 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <MX_I2C1_Init+0x74>)
 800183e:	2100      	movs	r1, #0
 8001840:	0018      	movs	r0, r3
 8001842:	f001 fa91 	bl	8002d68 <HAL_I2CEx_ConfigDigitalFilter>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d001      	beq.n	800184e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800184a:	f000 f90a 	bl	8001a62 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000060 	.word	0x20000060
 8001858:	40005400 	.word	0x40005400
 800185c:	00707cbb 	.word	0x00707cbb

08001860 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b08b      	sub	sp, #44	; 0x2c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	2414      	movs	r4, #20
 800186a:	193b      	adds	r3, r7, r4
 800186c:	0018      	movs	r0, r3
 800186e:	2314      	movs	r3, #20
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f002 ff04 	bl	8004680 <memset>
  if(i2cHandle->Instance==I2C1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <HAL_I2C_MspInit+0x90>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d131      	bne.n	80018e6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_I2C_MspInit+0x94>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_I2C_MspInit+0x94>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	02c9      	lsls	r1, r1, #11
 800188c:	430a      	orrs	r2, r1
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_I2C_MspInit+0x94>)
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	02db      	lsls	r3, r3, #11
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800189e:	0021      	movs	r1, r4
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	22c0      	movs	r2, #192	; 0xc0
 80018a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2212      	movs	r2, #18
 80018aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2203      	movs	r2, #3
 80018b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2201      	movs	r2, #1
 80018bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_I2C_MspInit+0x98>)
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f000 fb0f 	bl	8001ee8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_I2C_MspInit+0x94>)
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_I2C_MspInit+0x94>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0389      	lsls	r1, r1, #14
 80018d4:	430a      	orrs	r2, r1
 80018d6:	61da      	str	r2, [r3, #28]
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_I2C_MspInit+0x94>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	039b      	lsls	r3, r3, #14
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b00b      	add	sp, #44	; 0x2c
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40005400 	.word	0x40005400
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000400 	.word	0x48000400

080018fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//float  tf, pf;
	uint32_t pressure;
	//uint8_t dt_reg=0;
	uint8_t retr_cnt=0, dt;
 8001902:	230b      	movs	r3, #11
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
	uint16_t i=1,retr_cnt_full=0;
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	2201      	movs	r2, #1
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	1dbb      	adds	r3, r7, #6
 8001914:	2200      	movs	r2, #0
 8001916:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001918:	f000 f9a4 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191c:	f000 f832 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001920:	f7ff feca 	bl	80016b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001924:	f7ff ff5c 	bl	80017e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001928:	f000 f8a0 	bl	8001a6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Init();
 800192c:	f7ff fc30 	bl	8001190 <BME280_Init>

  NRF24_ini();
 8001930:	f7ff fe70 	bl	8001614 <NRF24_ini>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(BME280_GetStatus() == OK)
 8001934:	f7ff fc22 	bl	800117c <BME280_GetStatus>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d103      	bne.n	8001944 <main+0x48>
	  {
		  //tf = BME280_ReadTemperature();
		  //pf = BME280_ReadPressure();
		  pressure = BME280_ReadPressure();
 800193c:	f7ff fa1c 	bl	8000d78 <BME280_ReadPressure>
 8001940:	0003      	movs	r3, r0
 8001942:	60fb      	str	r3, [r7, #12]

  	//HAL_Delay(1000);
  	//memcpy(buf1,(uint8_t*)&i,2);
  	//if(retr_cnt_full>999) retr_cnt_full=999;
  	//memcpy(buf1+2,(uint8_t*)&retr_cnt_full,2);
  	buf1[0] = (uint8_t)(pressure & 0xFF);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <main+0x84>)
 800194a:	701a      	strb	r2, [r3, #0]
  	pressure >>= 8;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	60fb      	str	r3, [r7, #12]
  	buf1[1] = (uint8_t)(pressure & 0xFF);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <main+0x84>)
 8001958:	705a      	strb	r2, [r3, #1]
  	pressure >>= 8;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	60fb      	str	r3, [r7, #12]
  	buf1[2] = (uint8_t)(pressure & 0xFF);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <main+0x84>)
 8001966:	709a      	strb	r2, [r3, #2]
  	//uint32_t temp = 0;
  	//temp = *((uint32_t*)buf1);



  	buf1[3] = retr_cnt_full;
 8001968:	1dbb      	adds	r3, r7, #6
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <main+0x84>)
 8001970:	70da      	strb	r2, [r3, #3]
  	buf1[4] = i;
 8001972:	2308      	movs	r3, #8
 8001974:	18fb      	adds	r3, r7, r3
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b01      	ldr	r3, [pc, #4]	; (8001980 <main+0x84>)
 800197c:	711a      	strb	r2, [r3, #4]
	  if(BME280_GetStatus() == OK)
 800197e:	e7d9      	b.n	8001934 <main+0x38>
 8001980:	200000ac 	.word	0x200000ac

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b095      	sub	sp, #84	; 0x54
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	2420      	movs	r4, #32
 800198c:	193b      	adds	r3, r7, r4
 800198e:	0018      	movs	r0, r3
 8001990:	2330      	movs	r3, #48	; 0x30
 8001992:	001a      	movs	r2, r3
 8001994:	2100      	movs	r1, #0
 8001996:	f002 fe73 	bl	8004680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199a:	2310      	movs	r3, #16
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	0018      	movs	r0, r3
 80019a0:	2310      	movs	r3, #16
 80019a2:	001a      	movs	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f002 fe6b 	bl	8004680 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019aa:	003b      	movs	r3, r7
 80019ac:	0018      	movs	r0, r3
 80019ae:	2310      	movs	r3, #16
 80019b0:	001a      	movs	r2, r3
 80019b2:	2100      	movs	r1, #0
 80019b4:	f002 fe64 	bl	8004680 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b8:	0021      	movs	r1, r4
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2201      	movs	r2, #1
 80019c4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2202      	movs	r2, #2
 80019ca:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	0252      	lsls	r2, r2, #9
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	0312      	lsls	r2, r2, #12
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2200      	movs	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	0018      	movs	r0, r3
 80019e6:	f001 fa0b 	bl	8002e00 <HAL_RCC_OscConfig>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019ee:	f000 f838 	bl	8001a62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f2:	2110      	movs	r1, #16
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2207      	movs	r2, #7
 80019f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2202      	movs	r2, #2
 80019fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2101      	movs	r1, #1
 8001a10:	0018      	movs	r0, r3
 8001a12:	f001 fd0f 	bl	8003434 <HAL_RCC_ClockConfig>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a1a:	f000 f822 	bl	8001a62 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a1e:	003b      	movs	r3, r7
 8001a20:	2220      	movs	r2, #32
 8001a22:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001a24:	003b      	movs	r3, r7
 8001a26:	2210      	movs	r2, #16
 8001a28:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a2a:	003b      	movs	r3, r7
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f001 fe33 	bl	8003698 <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001a36:	f000 f814 	bl	8001a62 <Error_Handler>
  }
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b015      	add	sp, #84	; 0x54
 8001a40:	bd90      	pop	{r4, r7, pc}

08001a42 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	0002      	movs	r2, r0
 8001a4a:	1dbb      	adds	r3, r7, #6
 8001a4c:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_0 )
 8001a4e:	1dbb      	adds	r3, r7, #6
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_EXTI_Callback+0x18>
		{
			NRF24L01_IT();
 8001a56:	f7ff fdaf 	bl	80015b8 <NRF24L01_IT>
		}
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a66:	b672      	cpsid	i
}
 8001a68:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <Error_Handler+0x8>

08001a6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <MX_SPI1_Init+0x78>)
 8001a74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a78:	2282      	movs	r2, #130	; 0x82
 8001a7a:	0052      	lsls	r2, r2, #1
 8001a7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a86:	22e0      	movs	r2, #224	; 0xe0
 8001a88:	00d2      	lsls	r2, r2, #3
 8001a8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aa2:	2218      	movs	r2, #24
 8001aa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aba:	2207      	movs	r2, #7
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001acc:	0018      	movs	r0, r3
 8001ace:	f001 feb1 	bl	8003834 <HAL_SPI_Init>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f7ff ffc4 	bl	8001a62 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200000b4 	.word	0x200000b4
 8001ae4:	40013000 	.word	0x40013000

08001ae8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	2414      	movs	r4, #20
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	0018      	movs	r0, r3
 8001af6:	2314      	movs	r3, #20
 8001af8:	001a      	movs	r2, r3
 8001afa:	2100      	movs	r1, #0
 8001afc:	f002 fdc0 	bl	8004680 <memset>
  if(spiHandle->Instance==SPI1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_SPI_MspInit+0x90>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d132      	bne.n	8001b70 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_SPI_MspInit+0x94>)
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_SPI_MspInit+0x94>)
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	0149      	lsls	r1, r1, #5
 8001b14:	430a      	orrs	r2, r1
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_SPI_MspInit+0x94>)
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	015b      	lsls	r3, r3, #5
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_SPI_MspInit+0x94>)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_SPI_MspInit+0x94>)
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	0289      	lsls	r1, r1, #10
 8001b30:	430a      	orrs	r2, r1
 8001b32:	615a      	str	r2, [r3, #20]
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_SPI_MspInit+0x94>)
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b42:	0021      	movs	r1, r4
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	22e0      	movs	r2, #224	; 0xe0
 8001b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b56:	187b      	adds	r3, r7, r1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b5c:	187b      	adds	r3, r7, r1
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	187a      	adds	r2, r7, r1
 8001b64:	2390      	movs	r3, #144	; 0x90
 8001b66:	05db      	lsls	r3, r3, #23
 8001b68:	0011      	movs	r1, r2
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 f9bc 	bl	8001ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b00b      	add	sp, #44	; 0x2c
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	40013000 	.word	0x40013000
 8001b7c:	40021000 	.word	0x40021000

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	619a      	str	r2, [r3, #24]
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_MspInit+0x44>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba0:	69da      	ldr	r2, [r3, #28]
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_MspInit+0x44>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0549      	lsls	r1, r1, #21
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	61da      	str	r2, [r3, #28]
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_MspInit+0x44>)
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	055b      	lsls	r3, r3, #21
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bec:	f000 f882 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f000 fb02 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <LoopForever+0xe>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c2c:	4c0b      	ldr	r4, [pc, #44]	; (8001c5c <LoopForever+0x16>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c3a:	f7ff ffe4 	bl	8001c06 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c3e:	f002 fcfb 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c42:	f7ff fe5b 	bl	80018fc <main>

08001c46 <LoopForever>:

LoopForever:
    b LoopForever
 8001c46:	e7fe      	b.n	8001c46 <LoopForever>
  ldr   r0, =_estack
 8001c48:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c54:	08004774 	.word	0x08004774
  ldr r2, =_sbss
 8001c58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c5c:	2000011c 	.word	0x2000011c

08001c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_IRQHandler>
	...

08001c64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_Init+0x24>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_Init+0x24>)
 8001c6e:	2110      	movs	r1, #16
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f809 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7a:	f7ff ff81 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_InitTick+0x5c>)
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_InitTick+0x60>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	23fa      	movs	r3, #250	; 0xfa
 8001ca0:	0098      	lsls	r0, r3, #2
 8001ca2:	f7fe fa31 	bl	8000108 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	0019      	movs	r1, r3
 8001caa:	0020      	movs	r0, r4
 8001cac:	f7fe fa2c 	bl	8000108 <__udivsi3>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 f90b 	bl	8001ece <HAL_SYSTICK_Config>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e00f      	b.n	8001ce0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d80b      	bhi.n	8001cde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	425b      	negs	r3, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f8d8 	bl	8001e84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_InitTick+0x64>)
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd90      	pop	{r4, r7, pc}
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	2000000c 	.word	0x2000000c
 8001cf0:	20000008 	.word	0x20000008

08001cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x1c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_IncTick+0x20>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	18d2      	adds	r2, r2, r3
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_IncTick+0x20>)
 8001d06:	601a      	str	r2, [r3, #0]
}
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	2000000c 	.word	0x2000000c
 8001d14:	20000118 	.word	0x20000118

08001d18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <HAL_GetTick+0x10>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000118 	.word	0x20000118

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	0002      	movs	r2, r0
 8001d34:	1dfb      	adds	r3, r7, #7
 8001d36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d3e:	d809      	bhi.n	8001d54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d40:	1dfb      	adds	r3, r7, #7
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	001a      	movs	r2, r3
 8001d46:	231f      	movs	r3, #31
 8001d48:	401a      	ands	r2, r3
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <__NVIC_EnableIRQ+0x30>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4091      	lsls	r1, r2
 8001d50:	000a      	movs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
  }
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	0002      	movs	r2, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	1dfb      	adds	r3, r7, #7
 8001d6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b7f      	cmp	r3, #127	; 0x7f
 8001d74:	d828      	bhi.n	8001dc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d76:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <__NVIC_SetPriority+0xd4>)
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	33c0      	adds	r3, #192	; 0xc0
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	589b      	ldr	r3, [r3, r2]
 8001d86:	1dfa      	adds	r2, r7, #7
 8001d88:	7812      	ldrb	r2, [r2, #0]
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	400a      	ands	r2, r1
 8001d90:	00d2      	lsls	r2, r2, #3
 8001d92:	21ff      	movs	r1, #255	; 0xff
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	43d2      	mvns	r2, r2
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	22ff      	movs	r2, #255	; 0xff
 8001da4:	401a      	ands	r2, r3
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	0018      	movs	r0, r3
 8001dac:	2303      	movs	r3, #3
 8001dae:	4003      	ands	r3, r0
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db4:	481f      	ldr	r0, [pc, #124]	; (8001e34 <__NVIC_SetPriority+0xd4>)
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	33c0      	adds	r3, #192	; 0xc0
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dc6:	e031      	b.n	8001e2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dc8:	4a1b      	ldr	r2, [pc, #108]	; (8001e38 <__NVIC_SetPriority+0xd8>)
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	0019      	movs	r1, r3
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	3b08      	subs	r3, #8
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	3306      	adds	r3, #6
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	3304      	adds	r3, #4
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1dfa      	adds	r2, r7, #7
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	0011      	movs	r1, r2
 8001de8:	2203      	movs	r2, #3
 8001dea:	400a      	ands	r2, r1
 8001dec:	00d2      	lsls	r2, r2, #3
 8001dee:	21ff      	movs	r1, #255	; 0xff
 8001df0:	4091      	lsls	r1, r2
 8001df2:	000a      	movs	r2, r1
 8001df4:	43d2      	mvns	r2, r2
 8001df6:	401a      	ands	r2, r3
 8001df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	401a      	ands	r2, r3
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	0018      	movs	r0, r3
 8001e08:	2303      	movs	r3, #3
 8001e0a:	4003      	ands	r3, r0
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <__NVIC_SetPriority+0xd8>)
 8001e12:	1dfb      	adds	r3, r7, #7
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	001c      	movs	r4, r3
 8001e18:	230f      	movs	r3, #15
 8001e1a:	4023      	ands	r3, r4
 8001e1c:	3b08      	subs	r3, #8
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	430a      	orrs	r2, r1
 8001e22:	3306      	adds	r3, #6
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	18c3      	adds	r3, r0, r3
 8001e28:	3304      	adds	r3, #4
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b003      	add	sp, #12
 8001e32:	bd90      	pop	{r4, r7, pc}
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	045b      	lsls	r3, r3, #17
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d301      	bcc.n	8001e54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e50:	2301      	movs	r3, #1
 8001e52:	e010      	b.n	8001e76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <SysTick_Config+0x44>)
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	3a01      	subs	r2, #1
 8001e5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	425b      	negs	r3, r3
 8001e60:	2103      	movs	r1, #3
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff ff7c 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x44>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x44>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b002      	add	sp, #8
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	210f      	movs	r1, #15
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	1c02      	adds	r2, r0, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b004      	add	sp, #16
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	1dfb      	adds	r3, r7, #7
 8001eb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff33 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f7ff ffaf 	bl	8001e3c <SysTick_Config>
 8001ede:	0003      	movs	r3, r0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	e14f      	b.n	8002198 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4091      	lsls	r1, r2
 8001f02:	000a      	movs	r2, r1
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <HAL_GPIO_Init+0x28>
 8001f0e:	e140      	b.n	8002192 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d005      	beq.n	8001f28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2203      	movs	r2, #3
 8001f22:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d130      	bne.n	8001f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	409a      	lsls	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	43da      	mvns	r2, r3
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5e:	2201      	movs	r2, #1
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	2201      	movs	r2, #1
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d017      	beq.n	8001fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2203      	movs	r2, #3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d123      	bne.n	800201a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	58d3      	ldr	r3, [r2, r3]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	220f      	movs	r2, #15
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2107      	movs	r1, #7
 8001ffe:	400b      	ands	r3, r1
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	6939      	ldr	r1, [r7, #16]
 8002018:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	43da      	mvns	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2203      	movs	r2, #3
 8002038:	401a      	ands	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	23c0      	movs	r3, #192	; 0xc0
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	4013      	ands	r3, r2
 8002058:	d100      	bne.n	800205c <HAL_GPIO_Init+0x174>
 800205a:	e09a      	b.n	8002192 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205c:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <HAL_GPIO_Init+0x2c8>)
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_GPIO_Init+0x2c8>)
 8002062:	2101      	movs	r1, #1
 8002064:	430a      	orrs	r2, r1
 8002066:	619a      	str	r2, [r3, #24]
 8002068:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_GPIO_Init+0x2c8>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002074:	4a4f      	ldr	r2, [pc, #316]	; (80021b4 <HAL_GPIO_Init+0x2cc>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	3302      	adds	r3, #2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	589b      	ldr	r3, [r3, r2]
 8002080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2203      	movs	r2, #3
 8002086:	4013      	ands	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	220f      	movs	r2, #15
 800208c:	409a      	lsls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	43da      	mvns	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	2390      	movs	r3, #144	; 0x90
 800209c:	05db      	lsls	r3, r3, #23
 800209e:	429a      	cmp	r2, r3
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x1e2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a44      	ldr	r2, [pc, #272]	; (80021b8 <HAL_GPIO_Init+0x2d0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x1de>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a43      	ldr	r2, [pc, #268]	; (80021bc <HAL_GPIO_Init+0x2d4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x1da>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <HAL_GPIO_Init+0x2d8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x1d6>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x1e4>
 80020be:	2305      	movs	r3, #5
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x1e4>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x1e4>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x1e4>
 80020ca:	2300      	movs	r3, #0
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	2103      	movs	r1, #3
 80020d0:	400a      	ands	r2, r1
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020dc:	4935      	ldr	r1, [pc, #212]	; (80021b4 <HAL_GPIO_Init+0x2cc>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43da      	mvns	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	025b      	lsls	r3, r3, #9
 8002102:	4013      	ands	r3, r2
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43da      	mvns	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	029b      	lsls	r3, r3, #10
 800212c:	4013      	ands	r3, r2
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43da      	mvns	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	035b      	lsls	r3, r3, #13
 8002156:	4013      	ands	r3, r2
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43da      	mvns	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	039b      	lsls	r3, r3, #14
 8002180:	4013      	ands	r3, r2
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_GPIO_Init+0x2dc>)
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	40da      	lsrs	r2, r3
 80021a0:	1e13      	subs	r3, r2, #0
 80021a2:	d000      	beq.n	80021a6 <HAL_GPIO_Init+0x2be>
 80021a4:	e6a8      	b.n	8001ef8 <HAL_GPIO_Init+0x10>
  } 
}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b006      	add	sp, #24
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	40010400 	.word	0x40010400

080021c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	0008      	movs	r0, r1
 80021d2:	0011      	movs	r1, r2
 80021d4:	1cbb      	adds	r3, r7, #2
 80021d6:	1c02      	adds	r2, r0, #0
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	1c7b      	adds	r3, r7, #1
 80021dc:	1c0a      	adds	r2, r1, #0
 80021de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021e0:	1c7b      	adds	r3, r7, #1
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e8:	1cbb      	adds	r3, r7, #2
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021f2:	1cbb      	adds	r3, r7, #2
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	0002      	movs	r2, r0
 800220c:	1dbb      	adds	r3, r7, #6
 800220e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	1dba      	adds	r2, r7, #6
 8002216:	8812      	ldrh	r2, [r2, #0]
 8002218:	4013      	ands	r3, r2
 800221a:	d008      	beq.n	800222e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800221e:	1dba      	adds	r2, r7, #6
 8002220:	8812      	ldrh	r2, [r2, #0]
 8002222:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002224:	1dbb      	adds	r3, r7, #6
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	f7ff fc0a 	bl	8001a42 <HAL_GPIO_EXTI_Callback>
  }
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e082      	b.n	8002354 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2241      	movs	r2, #65	; 0x41
 8002252:	5c9b      	ldrb	r3, [r3, r2]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d107      	bne.n	800226a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff fafb 	bl	8001860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2241      	movs	r2, #65	; 0x41
 800226e:	2124      	movs	r1, #36	; 0x24
 8002270:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	438a      	bics	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4934      	ldr	r1, [pc, #208]	; (800235c <HAL_I2C_Init+0x120>)
 800228c:	400a      	ands	r2, r1
 800228e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4931      	ldr	r1, [pc, #196]	; (8002360 <HAL_I2C_Init+0x124>)
 800229c:	400a      	ands	r2, r1
 800229e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d108      	bne.n	80022ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	0209      	lsls	r1, r1, #8
 80022b4:	430a      	orrs	r2, r1
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	e007      	b.n	80022ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2184      	movs	r1, #132	; 0x84
 80022c4:	0209      	lsls	r1, r1, #8
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d104      	bne.n	80022dc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	491f      	ldr	r1, [pc, #124]	; (8002364 <HAL_I2C_Init+0x128>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	491a      	ldr	r1, [pc, #104]	; (8002360 <HAL_I2C_Init+0x124>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	431a      	orrs	r2, r3
 8002306:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69d9      	ldr	r1, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1a      	ldr	r2, [r3, #32]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2241      	movs	r2, #65	; 0x41
 8002340:	2120      	movs	r1, #32
 8002342:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2242      	movs	r2, #66	; 0x42
 800234e:	2100      	movs	r1, #0
 8002350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}
 800235c:	f0ffffff 	.word	0xf0ffffff
 8002360:	ffff7fff 	.word	0xffff7fff
 8002364:	02008000 	.word	0x02008000

08002368 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	000c      	movs	r4, r1
 8002372:	0010      	movs	r0, r2
 8002374:	0019      	movs	r1, r3
 8002376:	230a      	movs	r3, #10
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	1c22      	adds	r2, r4, #0
 800237c:	801a      	strh	r2, [r3, #0]
 800237e:	2308      	movs	r3, #8
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	1c02      	adds	r2, r0, #0
 8002384:	801a      	strh	r2, [r3, #0]
 8002386:	1dbb      	adds	r3, r7, #6
 8002388:	1c0a      	adds	r2, r1, #0
 800238a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2241      	movs	r2, #65	; 0x41
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	d000      	beq.n	800239a <HAL_I2C_Mem_Write+0x32>
 8002398:	e10c      	b.n	80025b4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_I2C_Mem_Write+0x42>
 80023a0:	232c      	movs	r3, #44	; 0x2c
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0ff      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	5c9b      	ldrb	r3, [r3, r2]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_I2C_Mem_Write+0x5c>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e0f8      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023cc:	f7ff fca4 	bl	8001d18 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	0219      	lsls	r1, r3, #8
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2319      	movs	r3, #25
 80023e0:	2201      	movs	r2, #1
 80023e2:	f000 fb0b 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 80023e6:	1e03      	subs	r3, r0, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0e3      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2241      	movs	r2, #65	; 0x41
 80023f2:	2121      	movs	r1, #33	; 0x21
 80023f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2242      	movs	r2, #66	; 0x42
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	222c      	movs	r2, #44	; 0x2c
 800240e:	18ba      	adds	r2, r7, r2
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241a:	1dbb      	adds	r3, r7, #6
 800241c:	881c      	ldrh	r4, [r3, #0]
 800241e:	2308      	movs	r3, #8
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	881a      	ldrh	r2, [r3, #0]
 8002424:	230a      	movs	r3, #10
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	8819      	ldrh	r1, [r3, #0]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	0023      	movs	r3, r4
 8002436:	f000 f9f9 	bl	800282c <I2C_RequestMemoryWrite>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d005      	beq.n	800244a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	2100      	movs	r1, #0
 8002444:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0b5      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2bff      	cmp	r3, #255	; 0xff
 8002452:	d911      	bls.n	8002478 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	22ff      	movs	r2, #255	; 0xff
 8002458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	b2da      	uxtb	r2, r3
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	045c      	lsls	r4, r3, #17
 8002464:	230a      	movs	r3, #10
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	8819      	ldrh	r1, [r3, #0]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	2300      	movs	r3, #0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	0023      	movs	r3, r4
 8002472:	f000 fbf7 	bl	8002c64 <I2C_TransferConfig>
 8002476:	e012      	b.n	800249e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	049c      	lsls	r4, r3, #18
 800248c:	230a      	movs	r3, #10
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	8819      	ldrh	r1, [r3, #0]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	2300      	movs	r3, #0
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	0023      	movs	r3, r4
 800249a:	f000 fbe3 	bl	8002c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fae8 	bl	8002a7a <I2C_WaitOnTXISFlagUntilTimeout>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e081      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03a      	beq.n	8002562 <HAL_I2C_Mem_Write+0x1fa>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d136      	bne.n	8002562 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	0013      	movs	r3, r2
 80024fe:	2200      	movs	r2, #0
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	f000 fa7b 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e053      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2bff      	cmp	r3, #255	; 0xff
 8002516:	d911      	bls.n	800253c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	22ff      	movs	r2, #255	; 0xff
 800251c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	b2da      	uxtb	r2, r3
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	045c      	lsls	r4, r3, #17
 8002528:	230a      	movs	r3, #10
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	8819      	ldrh	r1, [r3, #0]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	0023      	movs	r3, r4
 8002536:	f000 fb95 	bl	8002c64 <I2C_TransferConfig>
 800253a:	e012      	b.n	8002562 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	b2da      	uxtb	r2, r3
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	049c      	lsls	r4, r3, #18
 8002550:	230a      	movs	r3, #10
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	8819      	ldrh	r1, [r3, #0]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	2300      	movs	r3, #0
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	0023      	movs	r3, r4
 800255e:	f000 fb81 	bl	8002c64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d198      	bne.n	800249e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	0018      	movs	r0, r3
 8002574:	f000 fac0 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e01a      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2220      	movs	r2, #32
 8002586:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	490b      	ldr	r1, [pc, #44]	; (80025c0 <HAL_I2C_Mem_Write+0x258>)
 8002594:	400a      	ands	r2, r1
 8002596:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2241      	movs	r2, #65	; 0x41
 800259c:	2120      	movs	r1, #32
 800259e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2242      	movs	r2, #66	; 0x42
 80025a4:	2100      	movs	r1, #0
 80025a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b007      	add	sp, #28
 80025bc:	bd90      	pop	{r4, r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	fe00e800 	.word	0xfe00e800

080025c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	000c      	movs	r4, r1
 80025ce:	0010      	movs	r0, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	230a      	movs	r3, #10
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	1c22      	adds	r2, r4, #0
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	2308      	movs	r3, #8
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	1c02      	adds	r2, r0, #0
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	1dbb      	adds	r3, r7, #6
 80025e4:	1c0a      	adds	r2, r1, #0
 80025e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2241      	movs	r2, #65	; 0x41
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d000      	beq.n	80025f6 <HAL_I2C_Mem_Read+0x32>
 80025f4:	e110      	b.n	8002818 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_I2C_Mem_Read+0x42>
 80025fc:	232c      	movs	r3, #44	; 0x2c
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e103      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2240      	movs	r2, #64	; 0x40
 8002616:	5c9b      	ldrb	r3, [r3, r2]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_I2C_Mem_Read+0x5c>
 800261c:	2302      	movs	r3, #2
 800261e:	e0fc      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	2101      	movs	r1, #1
 8002626:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002628:	f7ff fb76 	bl	8001d18 <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	0219      	lsls	r1, r3, #8
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2319      	movs	r3, #25
 800263c:	2201      	movs	r2, #1
 800263e:	f000 f9dd 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0e7      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2241      	movs	r2, #65	; 0x41
 800264e:	2122      	movs	r1, #34	; 0x22
 8002650:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2242      	movs	r2, #66	; 0x42
 8002656:	2140      	movs	r1, #64	; 0x40
 8002658:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	222c      	movs	r2, #44	; 0x2c
 800266a:	18ba      	adds	r2, r7, r2
 800266c:	8812      	ldrh	r2, [r2, #0]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	881c      	ldrh	r4, [r3, #0]
 800267a:	2308      	movs	r3, #8
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	230a      	movs	r3, #10
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	8819      	ldrh	r1, [r3, #0]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	0023      	movs	r3, r4
 8002692:	f000 f92f 	bl	80028f4 <I2C_RequestMemoryRead>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d005      	beq.n	80026a6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2240      	movs	r2, #64	; 0x40
 800269e:	2100      	movs	r1, #0
 80026a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e0b9      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2bff      	cmp	r3, #255	; 0xff
 80026ae:	d911      	bls.n	80026d4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	22ff      	movs	r2, #255	; 0xff
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	045c      	lsls	r4, r3, #17
 80026c0:	230a      	movs	r3, #10
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	8819      	ldrh	r1, [r3, #0]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_I2C_Mem_Read+0x260>)
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	0023      	movs	r3, r4
 80026ce:	f000 fac9 	bl	8002c64 <I2C_TransferConfig>
 80026d2:	e012      	b.n	80026fa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	049c      	lsls	r4, r3, #18
 80026e8:	230a      	movs	r3, #10
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	8819      	ldrh	r1, [r3, #0]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_I2C_Mem_Read+0x260>)
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	0023      	movs	r3, r4
 80026f6:	f000 fab5 	bl	8002c64 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	0013      	movs	r3, r2
 8002704:	2200      	movs	r2, #0
 8002706:	2104      	movs	r1, #4
 8002708:	f000 f978 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e082      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	3b01      	subs	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03a      	beq.n	80027c6 <HAL_I2C_Mem_Read+0x202>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
 8002756:	d136      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	0013      	movs	r3, r2
 8002762:	2200      	movs	r2, #0
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	f000 f949 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e053      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2bff      	cmp	r3, #255	; 0xff
 800277a:	d911      	bls.n	80027a0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	22ff      	movs	r2, #255	; 0xff
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	b2da      	uxtb	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	045c      	lsls	r4, r3, #17
 800278c:	230a      	movs	r3, #10
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	8819      	ldrh	r1, [r3, #0]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	2300      	movs	r3, #0
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	0023      	movs	r3, r4
 800279a:	f000 fa63 	bl	8002c64 <I2C_TransferConfig>
 800279e:	e012      	b.n	80027c6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	049c      	lsls	r4, r3, #18
 80027b4:	230a      	movs	r3, #10
 80027b6:	18fb      	adds	r3, r7, r3
 80027b8:	8819      	ldrh	r1, [r3, #0]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	2300      	movs	r3, #0
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	0023      	movs	r3, r4
 80027c2:	f000 fa4f 	bl	8002c64 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d194      	bne.n	80026fa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f98e 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027dc:	1e03      	subs	r3, r0, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e01a      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2220      	movs	r2, #32
 80027ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	490c      	ldr	r1, [pc, #48]	; (8002828 <HAL_I2C_Mem_Read+0x264>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2241      	movs	r2, #65	; 0x41
 8002800:	2120      	movs	r1, #32
 8002802:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2242      	movs	r2, #66	; 0x42
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002818:	2302      	movs	r3, #2
  }
}
 800281a:	0018      	movs	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	b007      	add	sp, #28
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	80002400 	.word	0x80002400
 8002828:	fe00e800 	.word	0xfe00e800

0800282c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	000c      	movs	r4, r1
 8002836:	0010      	movs	r0, r2
 8002838:	0019      	movs	r1, r3
 800283a:	250a      	movs	r5, #10
 800283c:	197b      	adds	r3, r7, r5
 800283e:	1c22      	adds	r2, r4, #0
 8002840:	801a      	strh	r2, [r3, #0]
 8002842:	2308      	movs	r3, #8
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	1c02      	adds	r2, r0, #0
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	1dbb      	adds	r3, r7, #6
 800284c:	1c0a      	adds	r2, r1, #0
 800284e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002850:	1dbb      	adds	r3, r7, #6
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	045c      	lsls	r4, r3, #17
 800285a:	197b      	adds	r3, r7, r5
 800285c:	8819      	ldrh	r1, [r3, #0]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <I2C_RequestMemoryWrite+0xc4>)
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	0023      	movs	r3, r4
 8002866:	f000 f9fd 	bl	8002c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	6a39      	ldr	r1, [r7, #32]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f902 	bl	8002a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e033      	b.n	80028e6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287e:	1dbb      	adds	r3, r7, #6
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002886:	2308      	movs	r3, #8
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
 8002894:	e019      	b.n	80028ca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002896:	2308      	movs	r3, #8
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028aa:	6a39      	ldr	r1, [r7, #32]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 f8e3 	bl	8002a7a <I2C_WaitOnTXISFlagUntilTimeout>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d001      	beq.n	80028bc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e014      	b.n	80028e6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028bc:	2308      	movs	r3, #8
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a3a      	ldr	r2, [r7, #32]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	0013      	movs	r3, r2
 80028d4:	2200      	movs	r2, #0
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	f000 f890 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	80002000 	.word	0x80002000

080028f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	000c      	movs	r4, r1
 80028fe:	0010      	movs	r0, r2
 8002900:	0019      	movs	r1, r3
 8002902:	250a      	movs	r5, #10
 8002904:	197b      	adds	r3, r7, r5
 8002906:	1c22      	adds	r2, r4, #0
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	2308      	movs	r3, #8
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	1c02      	adds	r2, r0, #0
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	1c0a      	adds	r2, r1, #0
 8002916:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	197b      	adds	r3, r7, r5
 8002920:	8819      	ldrh	r1, [r3, #0]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <I2C_RequestMemoryRead+0xc0>)
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2300      	movs	r3, #0
 800292a:	f000 f99b 	bl	8002c64 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	6a39      	ldr	r1, [r7, #32]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f8a0 	bl	8002a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d001      	beq.n	8002942 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e033      	b.n	80029aa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002942:	1dbb      	adds	r3, r7, #6
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d107      	bne.n	800295a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800294a:	2308      	movs	r3, #8
 800294c:	18fb      	adds	r3, r7, r3
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
 8002958:	e019      	b.n	800298e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800295a:	2308      	movs	r3, #8
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	b29b      	uxth	r3, r3
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f881 	bl	8002a7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d001      	beq.n	8002980 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e014      	b.n	80029aa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002980:	2308      	movs	r3, #8
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800298e:	6a3a      	ldr	r2, [r7, #32]
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	0013      	movs	r3, r2
 8002998:	2200      	movs	r2, #0
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	f000 f82e 	bl	80029fc <I2C_WaitOnFlagUntilTimeout>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d001      	beq.n	80029a8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bdb0      	pop	{r4, r5, r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	80002000 	.word	0x80002000

080029b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2202      	movs	r2, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d103      	bne.n	80029d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d007      	beq.n	80029f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	430a      	orrs	r2, r1
 80029f2:	619a      	str	r2, [r3, #24]
  }
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	1dfb      	adds	r3, r7, #7
 8002a0a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a0c:	e021      	b.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	d01e      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a14:	f7ff f980 	bl	8001d18 <HAL_GetTick>
 8002a18:	0002      	movs	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d302      	bcc.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d113      	bne.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	2220      	movs	r2, #32
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2241      	movs	r2, #65	; 0x41
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2242      	movs	r2, #66	; 0x42
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2240      	movs	r2, #64	; 0x40
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	425a      	negs	r2, r3
 8002a62:	4153      	adcs	r3, r2
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	001a      	movs	r2, r3
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0ce      	beq.n	8002a0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a86:	e02b      	b.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 f86e 	bl	8002b70 <I2C_IsAcknowledgeFailed>
 8002a94:	1e03      	subs	r3, r0, #0
 8002a96:	d001      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e029      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	d01e      	beq.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7ff f939 	bl	8001d18 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d113      	bne.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	2220      	movs	r2, #32
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2241      	movs	r2, #65	; 0x41
 8002ac8:	2120      	movs	r1, #32
 8002aca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2242      	movs	r2, #66	; 0x42
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d1cc      	bne.n	8002a88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b004      	add	sp, #16
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	e028      	b.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f82f 	bl	8002b70 <I2C_IsAcknowledgeFailed>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e026      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7ff f8fd 	bl	8001d18 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	2220      	movs	r2, #32
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2241      	movs	r2, #65	; 0x41
 8002b40:	2120      	movs	r1, #32
 8002b42:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2242      	movs	r2, #66	; 0x42
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d1cf      	bne.n	8002b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	0018      	movs	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b004      	add	sp, #16
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2210      	movs	r2, #16
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d164      	bne.n	8002c54 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	049b      	lsls	r3, r3, #18
 8002b94:	401a      	ands	r2, r3
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	049b      	lsls	r3, r3, #18
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d02b      	beq.n	8002bf6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	01c9      	lsls	r1, r1, #7
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb0:	e021      	b.n	8002bf6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	d01e      	beq.n	8002bf6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7ff f8ae 	bl	8001d18 <HAL_GetTick>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <I2C_IsAcknowledgeFailed+0x5e>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d113      	bne.n	8002bf6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2241      	movs	r2, #65	; 0x41
 8002bde:	2120      	movs	r1, #32
 8002be0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2242      	movs	r2, #66	; 0x42
 8002be6:	2100      	movs	r1, #0
 8002be8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2240      	movs	r2, #64	; 0x40
 8002bee:	2100      	movs	r1, #0
 8002bf0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02f      	b.n	8002c56 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d1d6      	bne.n	8002bb2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2220      	movs	r2, #32
 8002c12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff fece 	bl	80029b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	490e      	ldr	r1, [pc, #56]	; (8002c60 <I2C_IsAcknowledgeFailed+0xf0>)
 8002c28:	400a      	ands	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	2204      	movs	r2, #4
 8002c32:	431a      	orrs	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2241      	movs	r2, #65	; 0x41
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2242      	movs	r2, #66	; 0x42
 8002c44:	2100      	movs	r1, #0
 8002c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	fe00e800 	.word	0xfe00e800

08002c64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	0008      	movs	r0, r1
 8002c6e:	0011      	movs	r1, r2
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	240a      	movs	r4, #10
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	2009      	movs	r0, #9
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	1c0a      	adds	r2, r1, #0
 8002c80:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	0d51      	lsrs	r1, r2, #21
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	00d2      	lsls	r2, r2, #3
 8002c90:	400a      	ands	r2, r1
 8002c92:	490e      	ldr	r1, [pc, #56]	; (8002ccc <I2C_TransferConfig+0x68>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	43d2      	mvns	r2, r2
 8002c98:	401a      	ands	r2, r3
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	059b      	lsls	r3, r3, #22
 8002ca2:	0d9a      	lsrs	r2, r3, #22
 8002ca4:	183b      	adds	r3, r7, r0
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	0418      	lsls	r0, r3, #16
 8002caa:	23ff      	movs	r3, #255	; 0xff
 8002cac:	041b      	lsls	r3, r3, #16
 8002cae:	4003      	ands	r3, r0
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b005      	add	sp, #20
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	03ff63ff 	.word	0x03ff63ff

08002cd0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2241      	movs	r2, #65	; 0x41
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d138      	bne.n	8002d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2240      	movs	r2, #64	; 0x40
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e032      	b.n	8002d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2240      	movs	r2, #64	; 0x40
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2241      	movs	r2, #65	; 0x41
 8002d00:	2124      	movs	r1, #36	; 0x24
 8002d02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	438a      	bics	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4911      	ldr	r1, [pc, #68]	; (8002d64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6819      	ldr	r1, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2101      	movs	r1, #1
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2241      	movs	r2, #65	; 0x41
 8002d48:	2120      	movs	r1, #32
 8002d4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	ffffefff 	.word	0xffffefff

08002d68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2241      	movs	r2, #65	; 0x41
 8002d76:	5c9b      	ldrb	r3, [r3, r2]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d139      	bne.n	8002df2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e033      	b.n	8002df4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2240      	movs	r2, #64	; 0x40
 8002d90:	2101      	movs	r1, #1
 8002d92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	2124      	movs	r1, #36	; 0x24
 8002d9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	438a      	bics	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2241      	movs	r2, #65	; 0x41
 8002de2:	2120      	movs	r1, #32
 8002de4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2240      	movs	r2, #64	; 0x40
 8002dea:	2100      	movs	r1, #0
 8002dec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	fffff0ff 	.word	0xfffff0ff

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e301      	b.n	8003416 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d100      	bne.n	8002e1e <HAL_RCC_OscConfig+0x1e>
 8002e1c:	e08d      	b.n	8002f3a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e1e:	4bc3      	ldr	r3, [pc, #780]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	220c      	movs	r2, #12
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d00e      	beq.n	8002e48 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2a:	4bc0      	ldr	r3, [pc, #768]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	220c      	movs	r2, #12
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x64>
 8002e36:	4bbd      	ldr	r3, [pc, #756]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	025b      	lsls	r3, r3, #9
 8002e3e:	401a      	ands	r2, r3
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	025b      	lsls	r3, r3, #9
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d10d      	bne.n	8002e64 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	4bb8      	ldr	r3, [pc, #736]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	4013      	ands	r3, r2
 8002e52:	d100      	bne.n	8002e56 <HAL_RCC_OscConfig+0x56>
 8002e54:	e070      	b.n	8002f38 <HAL_RCC_OscConfig+0x138>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d000      	beq.n	8002e60 <HAL_RCC_OscConfig+0x60>
 8002e5e:	e06b      	b.n	8002f38 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e2d8      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x7c>
 8002e6c:	4baf      	ldr	r3, [pc, #700]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4bae      	ldr	r3, [pc, #696]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e72:	2180      	movs	r1, #128	; 0x80
 8002e74:	0249      	lsls	r1, r1, #9
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	e02f      	b.n	8002edc <HAL_RCC_OscConfig+0xdc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x9e>
 8002e84:	4ba9      	ldr	r3, [pc, #676]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4ba8      	ldr	r3, [pc, #672]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e8a:	49a9      	ldr	r1, [pc, #676]	; (8003130 <HAL_RCC_OscConfig+0x330>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	4ba6      	ldr	r3, [pc, #664]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4ba5      	ldr	r3, [pc, #660]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002e96:	49a7      	ldr	r1, [pc, #668]	; (8003134 <HAL_RCC_OscConfig+0x334>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e01e      	b.n	8002edc <HAL_RCC_OscConfig+0xdc>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xc4>
 8002ea6:	4ba1      	ldr	r3, [pc, #644]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4ba0      	ldr	r3, [pc, #640]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002eac:	2180      	movs	r1, #128	; 0x80
 8002eae:	02c9      	lsls	r1, r1, #11
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	4b9d      	ldr	r3, [pc, #628]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b9c      	ldr	r3, [pc, #624]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0249      	lsls	r1, r1, #9
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e00b      	b.n	8002edc <HAL_RCC_OscConfig+0xdc>
 8002ec4:	4b99      	ldr	r3, [pc, #612]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b98      	ldr	r3, [pc, #608]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002eca:	4999      	ldr	r1, [pc, #612]	; (8003130 <HAL_RCC_OscConfig+0x330>)
 8002ecc:	400a      	ands	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	4b96      	ldr	r3, [pc, #600]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b95      	ldr	r3, [pc, #596]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	4997      	ldr	r1, [pc, #604]	; (8003134 <HAL_RCC_OscConfig+0x334>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d014      	beq.n	8002f0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee4:	f7fe ff18 	bl	8001d18 <HAL_GetTick>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eee:	f7fe ff13 	bl	8001d18 <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	; 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e28a      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f00:	4b8a      	ldr	r3, [pc, #552]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	029b      	lsls	r3, r3, #10
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0xee>
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe ff03 	bl	8001d18 <HAL_GetTick>
 8002f12:	0003      	movs	r3, r0
 8002f14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe fefe 	bl	8001d18 <HAL_GetTick>
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e275      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	4b80      	ldr	r3, [pc, #512]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x118>
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	d100      	bne.n	8002f46 <HAL_RCC_OscConfig+0x146>
 8002f44:	e069      	b.n	800301a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f50:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	220c      	movs	r2, #12
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d11c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x196>
 8002f5c:	4b73      	ldr	r3, [pc, #460]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	025b      	lsls	r3, r3, #9
 8002f64:	4013      	ands	r3, r2
 8002f66:	d116      	bne.n	8002f96 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f68:	4b70      	ldr	r3, [pc, #448]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x17e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e24b      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b6b      	ldr	r3, [pc, #428]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	22f8      	movs	r2, #248	; 0xf8
 8002f84:	4393      	bics	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	00da      	lsls	r2, r3, #3
 8002f8e:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f94:	e041      	b.n	800301a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d024      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002faa:	f7fe feb5 	bl	8001d18 <HAL_GetTick>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe feb0 	bl	8001d18 <HAL_GetTick>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e227      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d0f1      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	22f8      	movs	r2, #248	; 0xf8
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00da      	lsls	r2, r3, #3
 8002fe0:	4b52      	ldr	r3, [pc, #328]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e018      	b.n	800301a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe8:	4b50      	ldr	r3, [pc, #320]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b4f      	ldr	r3, [pc, #316]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fe90 	bl	8001d18 <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fe8b 	bl	8001d18 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e202      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003010:	4b46      	ldr	r3, [pc, #280]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2202      	movs	r2, #2
 8003016:	4013      	ands	r3, r2
 8003018:	d1f1      	bne.n	8002ffe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2208      	movs	r2, #8
 8003020:	4013      	ands	r3, r2
 8003022:	d036      	beq.n	8003092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d019      	beq.n	8003060 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 800302e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003030:	4b3e      	ldr	r3, [pc, #248]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003032:	2101      	movs	r1, #1
 8003034:	430a      	orrs	r2, r1
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7fe fe6e 	bl	8001d18 <HAL_GetTick>
 800303c:	0003      	movs	r3, r0
 800303e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003042:	f7fe fe69 	bl	8001d18 <HAL_GetTick>
 8003046:	0002      	movs	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1e0      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2202      	movs	r2, #2
 800305a:	4013      	ands	r3, r2
 800305c:	d0f1      	beq.n	8003042 <HAL_RCC_OscConfig+0x242>
 800305e:	e018      	b.n	8003092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003066:	2101      	movs	r1, #1
 8003068:	438a      	bics	r2, r1
 800306a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fe fe54 	bl	8001d18 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003076:	f7fe fe4f 	bl	8001d18 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1c6      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	2202      	movs	r2, #2
 800308e:	4013      	ands	r3, r2
 8003090:	d1f1      	bne.n	8003076 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2204      	movs	r2, #4
 8003098:	4013      	ands	r3, r2
 800309a:	d100      	bne.n	800309e <HAL_RCC_OscConfig+0x29e>
 800309c:	e0b4      	b.n	8003208 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309e:	201f      	movs	r0, #31
 80030a0:	183b      	adds	r3, r7, r0
 80030a2:	2200      	movs	r2, #0
 80030a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a6:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	055b      	lsls	r3, r3, #21
 80030ae:	4013      	ands	r3, r2
 80030b0:	d110      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	0549      	lsls	r1, r1, #21
 80030bc:	430a      	orrs	r2, r1
 80030be:	61da      	str	r2, [r3, #28]
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	055b      	lsls	r3, r3, #21
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030ce:	183b      	adds	r3, r7, r0
 80030d0:	2201      	movs	r2, #1
 80030d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_RCC_OscConfig+0x338>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	d11a      	bne.n	8003116 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_RCC_OscConfig+0x338>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_RCC_OscConfig+0x338>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	0049      	lsls	r1, r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fe13 	bl	8001d18 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f8:	f7fe fe0e 	bl	8001d18 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e185      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x338>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4013      	ands	r3, r2
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10e      	bne.n	800313c <HAL_RCC_OscConfig+0x33c>
 800311e:	4b03      	ldr	r3, [pc, #12]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	4b02      	ldr	r3, [pc, #8]	; (800312c <HAL_RCC_OscConfig+0x32c>)
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	621a      	str	r2, [r3, #32]
 800312a:	e035      	b.n	8003198 <HAL_RCC_OscConfig+0x398>
 800312c:	40021000 	.word	0x40021000
 8003130:	fffeffff 	.word	0xfffeffff
 8003134:	fffbffff 	.word	0xfffbffff
 8003138:	40007000 	.word	0x40007000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10c      	bne.n	800315e <HAL_RCC_OscConfig+0x35e>
 8003144:	4bb6      	ldr	r3, [pc, #728]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003146:	6a1a      	ldr	r2, [r3, #32]
 8003148:	4bb5      	ldr	r3, [pc, #724]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800314a:	2101      	movs	r1, #1
 800314c:	438a      	bics	r2, r1
 800314e:	621a      	str	r2, [r3, #32]
 8003150:	4bb3      	ldr	r3, [pc, #716]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	4bb2      	ldr	r3, [pc, #712]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003156:	2104      	movs	r1, #4
 8003158:	438a      	bics	r2, r1
 800315a:	621a      	str	r2, [r3, #32]
 800315c:	e01c      	b.n	8003198 <HAL_RCC_OscConfig+0x398>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x380>
 8003166:	4bae      	ldr	r3, [pc, #696]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	4bad      	ldr	r3, [pc, #692]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800316c:	2104      	movs	r1, #4
 800316e:	430a      	orrs	r2, r1
 8003170:	621a      	str	r2, [r3, #32]
 8003172:	4bab      	ldr	r3, [pc, #684]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003174:	6a1a      	ldr	r2, [r3, #32]
 8003176:	4baa      	ldr	r3, [pc, #680]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003178:	2101      	movs	r1, #1
 800317a:	430a      	orrs	r2, r1
 800317c:	621a      	str	r2, [r3, #32]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0x398>
 8003180:	4ba7      	ldr	r3, [pc, #668]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	4ba6      	ldr	r3, [pc, #664]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003186:	2101      	movs	r1, #1
 8003188:	438a      	bics	r2, r1
 800318a:	621a      	str	r2, [r3, #32]
 800318c:	4ba4      	ldr	r3, [pc, #656]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	4ba3      	ldr	r3, [pc, #652]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003192:	2104      	movs	r1, #4
 8003194:	438a      	bics	r2, r1
 8003196:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d014      	beq.n	80031ca <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7fe fdba 	bl	8001d18 <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a8:	e009      	b.n	80031be <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fdb5 	bl	8001d18 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	4a9b      	ldr	r2, [pc, #620]	; (8003424 <HAL_RCC_OscConfig+0x624>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e12b      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031be:	4b98      	ldr	r3, [pc, #608]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	2202      	movs	r2, #2
 80031c4:	4013      	ands	r3, r2
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x3aa>
 80031c8:	e013      	b.n	80031f2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fda5 	bl	8001d18 <HAL_GetTick>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	e009      	b.n	80031e8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe fda0 	bl	8001d18 <HAL_GetTick>
 80031d8:	0002      	movs	r2, r0
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	4a91      	ldr	r2, [pc, #580]	; (8003424 <HAL_RCC_OscConfig+0x624>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e116      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e8:	4b8d      	ldr	r3, [pc, #564]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	2202      	movs	r2, #2
 80031ee:	4013      	ands	r3, r2
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f2:	231f      	movs	r3, #31
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d105      	bne.n	8003208 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031fc:	4b88      	ldr	r3, [pc, #544]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	4b87      	ldr	r3, [pc, #540]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003202:	4989      	ldr	r1, [pc, #548]	; (8003428 <HAL_RCC_OscConfig+0x628>)
 8003204:	400a      	ands	r2, r1
 8003206:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2210      	movs	r2, #16
 800320e:	4013      	ands	r3, r2
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d12a      	bne.n	8003270 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800321a:	4b81      	ldr	r3, [pc, #516]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	4b80      	ldr	r3, [pc, #512]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003220:	2104      	movs	r1, #4
 8003222:	430a      	orrs	r2, r1
 8003224:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003226:	4b7e      	ldr	r3, [pc, #504]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322a:	4b7d      	ldr	r3, [pc, #500]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800322c:	2101      	movs	r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe fd71 	bl	8001d18 <HAL_GetTick>
 8003236:	0003      	movs	r3, r0
 8003238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800323c:	f7fe fd6c 	bl	8001d18 <HAL_GetTick>
 8003240:	0002      	movs	r2, r0
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0e3      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800324e:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	d0f1      	beq.n	800323c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003258:	4b71      	ldr	r3, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	22f8      	movs	r2, #248	; 0xf8
 800325e:	4393      	bics	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	00da      	lsls	r2, r3, #3
 8003268:	4b6d      	ldr	r3, [pc, #436]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800326a:	430a      	orrs	r2, r1
 800326c:	635a      	str	r2, [r3, #52]	; 0x34
 800326e:	e034      	b.n	80032da <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	3305      	adds	r3, #5
 8003276:	d111      	bne.n	800329c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003278:	4b69      	ldr	r3, [pc, #420]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800327a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327c:	4b68      	ldr	r3, [pc, #416]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800327e:	2104      	movs	r1, #4
 8003280:	438a      	bics	r2, r1
 8003282:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003284:	4b66      	ldr	r3, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	22f8      	movs	r2, #248	; 0xf8
 800328a:	4393      	bics	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	00da      	lsls	r2, r3, #3
 8003294:	4b62      	ldr	r3, [pc, #392]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003296:	430a      	orrs	r2, r1
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01e      	b.n	80032da <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800329c:	4b60      	ldr	r3, [pc, #384]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a0:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80032a2:	2104      	movs	r1, #4
 80032a4:	430a      	orrs	r2, r1
 80032a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032a8:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80032aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ac:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80032ae:	2101      	movs	r1, #1
 80032b0:	438a      	bics	r2, r1
 80032b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fe fd30 	bl	8001d18 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032be:	f7fe fd2b 	bl	8001d18 <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0a2      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	2202      	movs	r2, #2
 80032d6:	4013      	ands	r3, r2
 80032d8:	d1f1      	bne.n	80032be <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d100      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4e4>
 80032e2:	e097      	b.n	8003414 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b4e      	ldr	r3, [pc, #312]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	220c      	movs	r2, #12
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d100      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4f2>
 80032f0:	e06b      	b.n	80033ca <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d14c      	bne.n	8003394 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b49      	ldr	r3, [pc, #292]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b48      	ldr	r3, [pc, #288]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003300:	494a      	ldr	r1, [pc, #296]	; (800342c <HAL_RCC_OscConfig+0x62c>)
 8003302:	400a      	ands	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe fd07 	bl	8001d18 <HAL_GetTick>
 800330a:	0003      	movs	r3, r0
 800330c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fd02 	bl	8001d18 <HAL_GetTick>
 8003314:	0002      	movs	r2, r0
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e079      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003322:	4b3f      	ldr	r3, [pc, #252]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	049b      	lsls	r3, r3, #18
 800332a:	4013      	ands	r3, r2
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	4b3c      	ldr	r3, [pc, #240]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	220f      	movs	r2, #15
 8003334:	4393      	bics	r3, r2
 8003336:	0019      	movs	r1, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800333e:	430a      	orrs	r2, r1
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c
 8003342:	4b37      	ldr	r3, [pc, #220]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_RCC_OscConfig+0x630>)
 8003348:	4013      	ands	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	431a      	orrs	r2, r3
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b30      	ldr	r3, [pc, #192]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	0449      	lsls	r1, r1, #17
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe fcd5 	bl	8001d18 <HAL_GetTick>
 800336e:	0003      	movs	r3, r0
 8003370:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe fcd0 	bl	8001d18 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e047      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003386:	4b26      	ldr	r3, [pc, #152]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	049b      	lsls	r3, r3, #18
 800338e:	4013      	ands	r3, r2
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x574>
 8003392:	e03f      	b.n	8003414 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b21      	ldr	r3, [pc, #132]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 800339a:	4924      	ldr	r1, [pc, #144]	; (800342c <HAL_RCC_OscConfig+0x62c>)
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fcba 	bl	8001d18 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fcb5 	bl	8001d18 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e02c      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	049b      	lsls	r3, r3, #18
 80033c4:	4013      	ands	r3, r2
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x5aa>
 80033c8:	e024      	b.n	8003414 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01f      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_RCC_OscConfig+0x620>)
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	025b      	lsls	r3, r3, #9
 80033e8:	401a      	ands	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10e      	bne.n	8003410 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	220f      	movs	r2, #15
 80033f6:	401a      	ands	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	23f0      	movs	r3, #240	; 0xf0
 8003404:	039b      	lsls	r3, r3, #14
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b008      	add	sp, #32
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40021000 	.word	0x40021000
 8003424:	00001388 	.word	0x00001388
 8003428:	efffffff 	.word	0xefffffff
 800342c:	feffffff 	.word	0xfeffffff
 8003430:	ffc2ffff 	.word	0xffc2ffff

08003434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0b3      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	4013      	ands	r3, r2
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d911      	bls.n	800347a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	4393      	bics	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	4b55      	ldr	r3, [pc, #340]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d001      	beq.n	800347a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e09a      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2202      	movs	r2, #2
 8003480:	4013      	ands	r3, r2
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2204      	movs	r2, #4
 800348a:	4013      	ands	r3, r2
 800348c:	d006      	beq.n	800349c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800348e:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 8003494:	21e0      	movs	r1, #224	; 0xe0
 8003496:	00c9      	lsls	r1, r1, #3
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	22f0      	movs	r2, #240	; 0xf0
 80034a2:	4393      	bics	r3, r2
 80034a4:	0019      	movs	r1, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	4b44      	ldr	r3, [pc, #272]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d040      	beq.n	800353c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	029b      	lsls	r3, r3, #10
 80034ca:	4013      	ands	r3, r2
 80034cc:	d114      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06e      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b38      	ldr	r3, [pc, #224]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	049b      	lsls	r3, r3, #18
 80034e2:	4013      	ands	r3, r2
 80034e4:	d108      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e062      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2202      	movs	r2, #2
 80034f0:	4013      	ands	r3, r2
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e05b      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f8:	4b30      	ldr	r3, [pc, #192]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2203      	movs	r2, #3
 80034fe:	4393      	bics	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800350c:	f7fe fc04 	bl	8001d18 <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003514:	e009      	b.n	800352a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003516:	f7fe fbff 	bl	8001d18 <HAL_GetTick>
 800351a:	0002      	movs	r2, r0
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <HAL_RCC_ClockConfig+0x18c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e042      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	220c      	movs	r2, #12
 8003530:	401a      	ands	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1ec      	bne.n	8003516 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353c:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	4013      	ands	r3, r2
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d211      	bcs.n	800356e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4393      	bics	r3, r2
 8003552:	0019      	movs	r1, r3
 8003554:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_RCC_ClockConfig+0x184>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	4013      	ands	r3, r2
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d001      	beq.n	800356e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e020      	b.n	80035b0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	4013      	ands	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <HAL_RCC_ClockConfig+0x190>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800358c:	f000 f820 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8003590:	0001      	movs	r1, r0
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x188>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	220f      	movs	r2, #15
 800359a:	4013      	ands	r3, r2
 800359c:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x194>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	000a      	movs	r2, r1
 80035a2:	40da      	lsrs	r2, r3
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x198>)
 80035a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035a8:	2003      	movs	r0, #3
 80035aa:	f7fe fb6f 	bl	8001c8c <HAL_InitTick>
  
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b004      	add	sp, #16
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40022000 	.word	0x40022000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	00001388 	.word	0x00001388
 80035c4:	fffff8ff 	.word	0xfffff8ff
 80035c8:	08004754 	.word	0x08004754
 80035cc:	20000004 	.word	0x20000004

080035d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b08f      	sub	sp, #60	; 0x3c
 80035d4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80035d6:	2314      	movs	r3, #20
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035de:	c313      	stmia	r3!, {r0, r1, r4}
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	4a29      	ldr	r2, [pc, #164]	; (800368c <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035ea:	c313      	stmia	r3!, {r0, r1, r4}
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f4:	2300      	movs	r3, #0
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f8:	2300      	movs	r3, #0
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	220c      	movs	r2, #12
 800360e:	4013      	ands	r3, r2
 8003610:	2b04      	cmp	r3, #4
 8003612:	d002      	beq.n	800361a <HAL_RCC_GetSysClockFreq+0x4a>
 8003614:	2b08      	cmp	r3, #8
 8003616:	d003      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x50>
 8003618:	e02d      	b.n	8003676 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800361a:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <HAL_RCC_GetSysClockFreq+0xc4>)
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800361e:	e02d      	b.n	800367c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	0c9b      	lsrs	r3, r3, #18
 8003624:	220f      	movs	r2, #15
 8003626:	4013      	ands	r3, r2
 8003628:	2214      	movs	r2, #20
 800362a:	18ba      	adds	r2, r7, r2
 800362c:	5cd3      	ldrb	r3, [r2, r3]
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003630:	4b17      	ldr	r3, [pc, #92]	; (8003690 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	220f      	movs	r2, #15
 8003636:	4013      	ands	r3, r2
 8003638:	1d3a      	adds	r2, r7, #4
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	025b      	lsls	r3, r3, #9
 8003644:	4013      	ands	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800364a:	4812      	ldr	r0, [pc, #72]	; (8003694 <HAL_RCC_GetSysClockFreq+0xc4>)
 800364c:	f7fc fd5c 	bl	8000108 <__udivsi3>
 8003650:	0003      	movs	r3, r0
 8003652:	001a      	movs	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	4353      	muls	r3, r2
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
 800365a:	e009      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800365c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365e:	000a      	movs	r2, r1
 8003660:	0152      	lsls	r2, r2, #5
 8003662:	1a52      	subs	r2, r2, r1
 8003664:	0193      	lsls	r3, r2, #6
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	185b      	adds	r3, r3, r1
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003674:	e002      	b.n	800367c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800367a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b00f      	add	sp, #60	; 0x3c
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	080046b4 	.word	0x080046b4
 800368c:	080046c4 	.word	0x080046c4
 8003690:	40021000 	.word	0x40021000
 8003694:	007a1200 	.word	0x007a1200

08003698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	025b      	lsls	r3, r3, #9
 80036b0:	4013      	ands	r3, r2
 80036b2:	d100      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80036b4:	e08e      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2017      	movs	r0, #23
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	055b      	lsls	r3, r3, #21
 80036c6:	4013      	ands	r3, r2
 80036c8:	d110      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b54      	ldr	r3, [pc, #336]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	0549      	lsls	r1, r1, #21
 80036d4:	430a      	orrs	r2, r1
 80036d6:	61da      	str	r2, [r3, #28]
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	055b      	lsls	r3, r3, #21
 80036e0:	4013      	ands	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e6:	183b      	adds	r3, r7, r0
 80036e8:	2201      	movs	r2, #1
 80036ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ec:	4b4c      	ldr	r3, [pc, #304]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	d11a      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f8:	4b49      	ldr	r3, [pc, #292]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b48      	ldr	r3, [pc, #288]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	0049      	lsls	r1, r1, #1
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003706:	f7fe fb07 	bl	8001d18 <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	e008      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fe fb02 	bl	8001d18 <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b64      	cmp	r3, #100	; 0x64
 800371c:	d901      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e077      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4013      	ands	r3, r2
 800372c:	d0f0      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003730:	6a1a      	ldr	r2, [r3, #32]
 8003732:	23c0      	movs	r3, #192	; 0xc0
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4013      	ands	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d034      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	23c0      	movs	r3, #192	; 0xc0
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4013      	ands	r3, r2
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	d02c      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003750:	4b32      	ldr	r3, [pc, #200]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a33      	ldr	r2, [pc, #204]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003756:	4013      	ands	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0249      	lsls	r1, r1, #9
 8003764:	430a      	orrs	r2, r1
 8003766:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800376e:	492e      	ldr	r1, [pc, #184]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003770:	400a      	ands	r2, r1
 8003772:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003774:	4b29      	ldr	r3, [pc, #164]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	4013      	ands	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe fac9 	bl	8001d18 <HAL_GetTick>
 8003786:	0003      	movs	r3, r0
 8003788:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fe fac4 	bl	8001d18 <HAL_GetTick>
 8003790:	0002      	movs	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	4a25      	ldr	r2, [pc, #148]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e038      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	2202      	movs	r2, #2
 80037a6:	4013      	ands	r3, r2
 80037a8:	d0f0      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037aa:	4b1c      	ldr	r3, [pc, #112]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ba:	430a      	orrs	r2, r1
 80037bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037be:	2317      	movs	r3, #23
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ce:	4918      	ldr	r1, [pc, #96]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	2203      	movs	r2, #3
 80037e4:	4393      	bics	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037ee:	430a      	orrs	r2, r1
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2220      	movs	r2, #32
 80037f8:	4013      	ands	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	2210      	movs	r2, #16
 8003802:	4393      	bics	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	4b04      	ldr	r3, [pc, #16]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800380c:	430a      	orrs	r2, r1
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b006      	add	sp, #24
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
 8003824:	fffffcff 	.word	0xfffffcff
 8003828:	fffeffff 	.word	0xfffeffff
 800382c:	00001388 	.word	0x00001388
 8003830:	efffffff 	.word	0xefffffff

08003834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0a8      	b.n	8003998 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	2382      	movs	r3, #130	; 0x82
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	429a      	cmp	r2, r3
 8003858:	d009      	beq.n	800386e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	61da      	str	r2, [r3, #28]
 8003860:	e005      	b.n	800386e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	225d      	movs	r2, #93	; 0x5d
 8003878:	5c9b      	ldrb	r3, [r3, r2]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	225c      	movs	r2, #92	; 0x5c
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f7fe f92c 	bl	8001ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	225d      	movs	r2, #93	; 0x5d
 8003894:	2102      	movs	r1, #2
 8003896:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2140      	movs	r1, #64	; 0x40
 80038a4:	438a      	bics	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	23e0      	movs	r3, #224	; 0xe0
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d902      	bls.n	80038ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e002      	b.n	80038c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038ba:	2380      	movs	r3, #128	; 0x80
 80038bc:	015b      	lsls	r3, r3, #5
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	23f0      	movs	r3, #240	; 0xf0
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d008      	beq.n	80038de <HAL_SPI_Init+0xaa>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	23e0      	movs	r3, #224	; 0xe0
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d002      	beq.n	80038de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	2382      	movs	r3, #130	; 0x82
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	401a      	ands	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	2384      	movs	r3, #132	; 0x84
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	400b      	ands	r3, r1
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2102      	movs	r1, #2
 80038fa:	400b      	ands	r3, r1
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2101      	movs	r1, #1
 8003904:	400b      	ands	r3, r1
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6999      	ldr	r1, [r3, #24]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	400b      	ands	r3, r1
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2138      	movs	r1, #56	; 0x38
 800391a:	400b      	ands	r3, r1
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	400b      	ands	r3, r1
 8003926:	431a      	orrs	r2, r3
 8003928:	0011      	movs	r1, r2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	401a      	ands	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	2204      	movs	r2, #4
 8003944:	401a      	ands	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2110      	movs	r1, #16
 800394c:	400b      	ands	r3, r1
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	2108      	movs	r1, #8
 8003956:	400b      	ands	r3, r1
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68d9      	ldr	r1, [r3, #12]
 800395e:	23f0      	movs	r3, #240	; 0xf0
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	400b      	ands	r3, r1
 8003964:	431a      	orrs	r2, r3
 8003966:	0011      	movs	r1, r2
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	015b      	lsls	r3, r3, #5
 800396e:	401a      	ands	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4907      	ldr	r1, [pc, #28]	; (80039a0 <HAL_SPI_Init+0x16c>)
 8003984:	400a      	ands	r2, r1
 8003986:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	225d      	movs	r2, #93	; 0x5d
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b004      	add	sp, #16
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	fffff7ff 	.word	0xfffff7ff

080039a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039b4:	231f      	movs	r3, #31
 80039b6:	18fb      	adds	r3, r7, r3
 80039b8:	2200      	movs	r2, #0
 80039ba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	225c      	movs	r2, #92	; 0x5c
 80039c0:	5c9b      	ldrb	r3, [r3, r2]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_SPI_Transmit+0x26>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e140      	b.n	8003c4c <HAL_SPI_Transmit+0x2a8>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	225c      	movs	r2, #92	; 0x5c
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039d2:	f7fe f9a1 	bl	8001d18 <HAL_GetTick>
 80039d6:	0003      	movs	r3, r0
 80039d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80039da:	2316      	movs	r3, #22
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	1dba      	adds	r2, r7, #6
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	225d      	movs	r2, #93	; 0x5d
 80039e8:	5c9b      	ldrb	r3, [r3, r2]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d004      	beq.n	80039fa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	2202      	movs	r2, #2
 80039f6:	701a      	strb	r2, [r3, #0]
    goto error;
 80039f8:	e11d      	b.n	8003c36 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_SPI_Transmit+0x64>
 8003a00:	1dbb      	adds	r3, r7, #6
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003a08:	231f      	movs	r3, #31
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003a10:	e111      	b.n	8003c36 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	225d      	movs	r2, #93	; 0x5d
 8003a16:	2103      	movs	r1, #3
 8003a18:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1dba      	adds	r2, r7, #6
 8003a2a:	8812      	ldrh	r2, [r2, #0]
 8003a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1dba      	adds	r2, r7, #6
 8003a32:	8812      	ldrh	r2, [r2, #0]
 8003a34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2244      	movs	r2, #68	; 0x44
 8003a40:	2100      	movs	r1, #0
 8003a42:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2246      	movs	r2, #70	; 0x46
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d110      	bne.n	8003a86 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2140      	movs	r1, #64	; 0x40
 8003a70:	438a      	bics	r2, r1
 8003a72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	01c9      	lsls	r1, r1, #7
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2240      	movs	r2, #64	; 0x40
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d007      	beq.n	8003aa4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2140      	movs	r1, #64	; 0x40
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	23e0      	movs	r3, #224	; 0xe0
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d94e      	bls.n	8003b4e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <HAL_SPI_Transmit+0x11e>
 8003ab8:	2316      	movs	r3, #22
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d13f      	bne.n	8003b42 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	1c9a      	adds	r2, r3, #2
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ae6:	e02c      	b.n	8003b42 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2202      	movs	r2, #2
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d112      	bne.n	8003b1c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	881a      	ldrh	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	1c9a      	adds	r2, r3, #2
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b1a:	e012      	b.n	8003b42 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1c:	f7fe f8fc 	bl	8001d18 <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d802      	bhi.n	8003b32 <HAL_SPI_Transmit+0x18e>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	d102      	bne.n	8003b38 <HAL_SPI_Transmit+0x194>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003b38:	231f      	movs	r3, #31
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	701a      	strb	r2, [r3, #0]
          goto error;
 8003b40:	e079      	b.n	8003c36 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1cd      	bne.n	8003ae8 <HAL_SPI_Transmit+0x144>
 8003b4c:	e04f      	b.n	8003bee <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_SPI_Transmit+0x1bc>
 8003b56:	2316      	movs	r3, #22
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d141      	bne.n	8003be4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003b86:	e02d      	b.n	8003be4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d113      	bne.n	8003bbe <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bbc:	e012      	b.n	8003be4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbe:	f7fe f8ab 	bl	8001d18 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d802      	bhi.n	8003bd4 <HAL_SPI_Transmit+0x230>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_SPI_Transmit+0x236>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8003bda:	231f      	movs	r3, #31
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2203      	movs	r2, #3
 8003be0:	701a      	strb	r2, [r3, #0]
          goto error;
 8003be2:	e028      	b.n	8003c36 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1cc      	bne.n	8003b88 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	6839      	ldr	r1, [r7, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fcd9 	bl	80045ac <SPI_EndRxTxTransaction>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	613b      	str	r3, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8003c2a:	231f      	movs	r3, #31
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e000      	b.n	8003c36 <HAL_SPI_Transmit+0x292>
  }

error:
 8003c34:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	225d      	movs	r2, #93	; 0x5d
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	225c      	movs	r2, #92	; 0x5c
 8003c42:	2100      	movs	r1, #0
 8003c44:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003c46:	231f      	movs	r3, #31
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	781b      	ldrb	r3, [r3, #0]
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b008      	add	sp, #32
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	1dbb      	adds	r3, r7, #6
 8003c62:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c64:	2317      	movs	r3, #23
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2382      	movs	r3, #130	; 0x82
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d113      	bne.n	8003ca0 <HAL_SPI_Receive+0x4c>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	225d      	movs	r2, #93	; 0x5d
 8003c84:	2104      	movs	r1, #4
 8003c86:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c88:	1dbb      	adds	r3, r7, #6
 8003c8a:	881c      	ldrh	r4, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	0023      	movs	r3, r4
 8003c98:	f000 f928 	bl	8003eec <HAL_SPI_TransmitReceive>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	e11c      	b.n	8003eda <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	225c      	movs	r2, #92	; 0x5c
 8003ca4:	5c9b      	ldrb	r3, [r3, r2]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Receive+0x5a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e115      	b.n	8003eda <HAL_SPI_Receive+0x286>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	225c      	movs	r2, #92	; 0x5c
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb6:	f7fe f82f 	bl	8001d18 <HAL_GetTick>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	225d      	movs	r2, #93	; 0x5d
 8003cc2:	5c9b      	ldrb	r3, [r3, r2]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d004      	beq.n	8003cd4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8003cca:	2317      	movs	r3, #23
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cd2:	e0f7      	b.n	8003ec4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_SPI_Receive+0x8e>
 8003cda:	1dbb      	adds	r3, r7, #6
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d104      	bne.n	8003cec <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8003ce2:	2317      	movs	r3, #23
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
    goto error;
 8003cea:	e0eb      	b.n	8003ec4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	225d      	movs	r2, #93	; 0x5d
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1dba      	adds	r2, r7, #6
 8003d04:	2144      	movs	r1, #68	; 0x44
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1dba      	adds	r2, r7, #6
 8003d0e:	2146      	movs	r1, #70	; 0x46
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	23e0      	movs	r3, #224	; 0xe0
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d908      	bls.n	8003d50 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4966      	ldr	r1, [pc, #408]	; (8003ee4 <HAL_SPI_Receive+0x290>)
 8003d4a:	400a      	ands	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e008      	b.n	8003d62 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	0149      	lsls	r1, r1, #5
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10f      	bne.n	8003d8e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	438a      	bics	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4957      	ldr	r1, [pc, #348]	; (8003ee8 <HAL_SPI_Receive+0x294>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2240      	movs	r2, #64	; 0x40
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d007      	beq.n	8003dac <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	23e0      	movs	r3, #224	; 0xe0
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d900      	bls.n	8003dba <HAL_SPI_Receive+0x166>
 8003db8:	e069      	b.n	8003e8e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003dba:	e031      	b.n	8003e20 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d117      	bne.n	8003dfa <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2246      	movs	r2, #70	; 0x46
 8003dea:	5a9b      	ldrh	r3, [r3, r2]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b299      	uxth	r1, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2246      	movs	r2, #70	; 0x46
 8003df6:	5299      	strh	r1, [r3, r2]
 8003df8:	e012      	b.n	8003e20 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfa:	f7fd ff8d 	bl	8001d18 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d802      	bhi.n	8003e10 <HAL_SPI_Receive+0x1bc>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_SPI_Receive+0x1c2>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d104      	bne.n	8003e20 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8003e16:	2317      	movs	r3, #23
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e1e:	e051      	b.n	8003ec4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2246      	movs	r2, #70	; 0x46
 8003e24:	5a9b      	ldrh	r3, [r3, r2]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1c7      	bne.n	8003dbc <HAL_SPI_Receive+0x168>
 8003e2c:	e035      	b.n	8003e9a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2201      	movs	r2, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d115      	bne.n	8003e68 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	b292      	uxth	r2, r2
 8003e48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	1c9a      	adds	r2, r3, #2
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2246      	movs	r2, #70	; 0x46
 8003e58:	5a9b      	ldrh	r3, [r3, r2]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b299      	uxth	r1, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2246      	movs	r2, #70	; 0x46
 8003e64:	5299      	strh	r1, [r3, r2]
 8003e66:	e012      	b.n	8003e8e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e68:	f7fd ff56 	bl	8001d18 <HAL_GetTick>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d802      	bhi.n	8003e7e <HAL_SPI_Receive+0x22a>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Receive+0x230>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003e84:	2317      	movs	r3, #23
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2203      	movs	r2, #3
 8003e8a:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e8c:	e01a      	b.n	8003ec4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2246      	movs	r2, #70	; 0x46
 8003e92:	5a9b      	ldrh	r3, [r3, r2]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1c9      	bne.n	8003e2e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 fb25 	bl	80044f0 <SPI_EndRxTransaction>
 8003ea6:	1e03      	subs	r3, r0, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8003eb8:	2317      	movs	r3, #23
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e000      	b.n	8003ec4 <HAL_SPI_Receive+0x270>
  }

error :
 8003ec2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	225d      	movs	r2, #93	; 0x5d
 8003ec8:	2101      	movs	r1, #1
 8003eca:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	225c      	movs	r2, #92	; 0x5c
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ed4:	2317      	movs	r3, #23
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	781b      	ldrb	r3, [r3, #0]
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b007      	add	sp, #28
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	ffffefff 	.word	0xffffefff
 8003ee8:	ffffbfff 	.word	0xffffbfff

08003eec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	001a      	movs	r2, r3
 8003efa:	1cbb      	adds	r3, r7, #2
 8003efc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003efe:	2301      	movs	r3, #1
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f02:	2323      	movs	r3, #35	; 0x23
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	225c      	movs	r2, #92	; 0x5c
 8003f0e:	5c9b      	ldrb	r3, [r3, r2]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x2c>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e1b5      	b.n	8004284 <HAL_SPI_TransmitReceive+0x398>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	225c      	movs	r2, #92	; 0x5c
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f20:	f7fd fefa 	bl	8001d18 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f28:	201b      	movs	r0, #27
 8003f2a:	183b      	adds	r3, r7, r0
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	215d      	movs	r1, #93	; 0x5d
 8003f30:	5c52      	ldrb	r2, [r2, r1]
 8003f32:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f3a:	2312      	movs	r3, #18
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	1cba      	adds	r2, r7, #2
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f44:	183b      	adds	r3, r7, r0
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d011      	beq.n	8003f70 <HAL_SPI_TransmitReceive+0x84>
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	2382      	movs	r3, #130	; 0x82
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d107      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x7a>
 8003f5e:	183b      	adds	r3, r7, r0
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d004      	beq.n	8003f70 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003f66:	2323      	movs	r3, #35	; 0x23
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f6e:	e17e      	b.n	800426e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d006      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x98>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0x98>
 8003f7c:	1cbb      	adds	r3, r7, #2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003f84:	2323      	movs	r3, #35	; 0x23
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2201      	movs	r2, #1
 8003f8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f8c:	e16f      	b.n	800426e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	225d      	movs	r2, #93	; 0x5d
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d003      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	225d      	movs	r2, #93	; 0x5d
 8003f9e:	2105      	movs	r1, #5
 8003fa0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1cba      	adds	r2, r7, #2
 8003fb2:	2146      	movs	r1, #70	; 0x46
 8003fb4:	8812      	ldrh	r2, [r2, #0]
 8003fb6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1cba      	adds	r2, r7, #2
 8003fbc:	2144      	movs	r1, #68	; 0x44
 8003fbe:	8812      	ldrh	r2, [r2, #0]
 8003fc0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1cba      	adds	r2, r7, #2
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1cba      	adds	r2, r7, #2
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	23e0      	movs	r3, #224	; 0xe0
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	49a4      	ldr	r1, [pc, #656]	; (800428c <HAL_SPI_TransmitReceive+0x3a0>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e008      	b.n	8004014 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2180      	movs	r1, #128	; 0x80
 800400e:	0149      	lsls	r1, r1, #5
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	4013      	ands	r3, r2
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d007      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2140      	movs	r1, #64	; 0x40
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	23e0      	movs	r3, #224	; 0xe0
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	429a      	cmp	r2, r3
 800403c:	d800      	bhi.n	8004040 <HAL_SPI_TransmitReceive+0x154>
 800403e:	e07f      	b.n	8004140 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x168>
 8004048:	2312      	movs	r3, #18
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d000      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x168>
 8004052:	e069      	b.n	8004128 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	881a      	ldrh	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004078:	e056      	b.n	8004128 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2202      	movs	r2, #2
 8004082:	4013      	ands	r3, r2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d11b      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x1d4>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x1d4>
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	2b01      	cmp	r3, #1
 8004096:	d113      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2201      	movs	r2, #1
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d11c      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x21c>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2246      	movs	r2, #70	; 0x46
 80040d2:	5a9b      	ldrh	r3, [r3, r2]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	b292      	uxth	r2, r2
 80040e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2246      	movs	r2, #70	; 0x46
 80040f6:	5a9b      	ldrh	r3, [r3, r2]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b299      	uxth	r1, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2246      	movs	r2, #70	; 0x46
 8004102:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004108:	f7fd fe06 	bl	8001d18 <HAL_GetTick>
 800410c:	0002      	movs	r2, r0
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004114:	429a      	cmp	r2, r3
 8004116:	d807      	bhi.n	8004128 <HAL_SPI_TransmitReceive+0x23c>
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	3301      	adds	r3, #1
 800411c:	d004      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800411e:	2323      	movs	r3, #35	; 0x23
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2203      	movs	r2, #3
 8004124:	701a      	strb	r2, [r3, #0]
        goto error;
 8004126:	e0a2      	b.n	800426e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1a3      	bne.n	800407a <HAL_SPI_TransmitReceive+0x18e>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2246      	movs	r2, #70	; 0x46
 8004136:	5a9b      	ldrh	r3, [r3, r2]
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d19d      	bne.n	800407a <HAL_SPI_TransmitReceive+0x18e>
 800413e:	e085      	b.n	800424c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x268>
 8004148:	2312      	movs	r3, #18
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d000      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x268>
 8004152:	e070      	b.n	8004236 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	330c      	adds	r3, #12
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800417a:	e05c      	b.n	8004236 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d11c      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x2d8>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d017      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x2d8>
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2b01      	cmp	r3, #1
 8004198:	d114      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2201      	movs	r2, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d11e      	bne.n	8004210 <HAL_SPI_TransmitReceive+0x324>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2246      	movs	r2, #70	; 0x46
 80041d6:	5a9b      	ldrh	r3, [r3, r2]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	001a      	movs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	7812      	ldrb	r2, [r2, #0]
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2246      	movs	r2, #70	; 0x46
 80041fe:	5a9b      	ldrh	r3, [r3, r2]
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b299      	uxth	r1, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2246      	movs	r2, #70	; 0x46
 800420a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420c:	2301      	movs	r3, #1
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004210:	f7fd fd82 	bl	8001d18 <HAL_GetTick>
 8004214:	0002      	movs	r2, r0
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421c:	429a      	cmp	r2, r3
 800421e:	d802      	bhi.n	8004226 <HAL_SPI_TransmitReceive+0x33a>
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	3301      	adds	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_SPI_TransmitReceive+0x340>
 8004226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004228:	2b00      	cmp	r3, #0
 800422a:	d104      	bne.n	8004236 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800422c:	2323      	movs	r3, #35	; 0x23
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2203      	movs	r2, #3
 8004232:	701a      	strb	r2, [r3, #0]
        goto error;
 8004234:	e01b      	b.n	800426e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d19d      	bne.n	800417c <HAL_SPI_TransmitReceive+0x290>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2246      	movs	r2, #70	; 0x46
 8004244:	5a9b      	ldrh	r3, [r3, r2]
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d197      	bne.n	800417c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	0018      	movs	r0, r3
 8004254:	f000 f9aa 	bl	80045ac <SPI_EndRxTxTransaction>
 8004258:	1e03      	subs	r3, r0, #0
 800425a:	d007      	beq.n	800426c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800425c:	2323      	movs	r3, #35	; 0x23
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	661a      	str	r2, [r3, #96]	; 0x60
 800426a:	e000      	b.n	800426e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800426c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	225d      	movs	r2, #93	; 0x5d
 8004272:	2101      	movs	r1, #1
 8004274:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	225c      	movs	r2, #92	; 0x5c
 800427a:	2100      	movs	r1, #0
 800427c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800427e:	2323      	movs	r3, #35	; 0x23
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	781b      	ldrb	r3, [r3, #0]
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b00a      	add	sp, #40	; 0x28
 800428a:	bd80      	pop	{r7, pc}
 800428c:	ffffefff 	.word	0xffffefff

08004290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a0:	f7fd fd3a 	bl	8001d18 <HAL_GetTick>
 80042a4:	0002      	movs	r2, r0
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	18d3      	adds	r3, r2, r3
 80042ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b0:	f7fd fd32 	bl	8001d18 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042b8:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	015b      	lsls	r3, r3, #5
 80042be:	0d1b      	lsrs	r3, r3, #20
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	4353      	muls	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c6:	e058      	b.n	800437a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	d055      	beq.n	800437a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042ce:	f7fd fd23 	bl	8001d18 <HAL_GetTick>
 80042d2:	0002      	movs	r2, r0
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d902      	bls.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d142      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	21e0      	movs	r1, #224	; 0xe0
 80042f0:	438a      	bics	r2, r1
 80042f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	2382      	movs	r3, #130	; 0x82
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d113      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	429a      	cmp	r2, r3
 800430a:	d005      	beq.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	429a      	cmp	r2, r3
 8004316:	d107      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2140      	movs	r1, #64	; 0x40
 8004324:	438a      	bics	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	019b      	lsls	r3, r3, #6
 8004330:	429a      	cmp	r2, r3
 8004332:	d110      	bne.n	8004356 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	491a      	ldr	r1, [pc, #104]	; (80043a8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004340:	400a      	ands	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	0189      	lsls	r1, r1, #6
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	225d      	movs	r2, #93	; 0x5d
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	225c      	movs	r2, #92	; 0x5c
 8004362:	2100      	movs	r1, #0
 8004364:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e017      	b.n	800439a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3b01      	subs	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	425a      	negs	r2, r3
 800438a:	4153      	adcs	r3, r2
 800438c:	b2db      	uxtb	r3, r3
 800438e:	001a      	movs	r2, r3
 8004390:	1dfb      	adds	r3, r7, #7
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d197      	bne.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b008      	add	sp, #32
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	20000004 	.word	0x20000004
 80043a8:	ffffdfff 	.word	0xffffdfff

080043ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043ba:	2317      	movs	r3, #23
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043c2:	f7fd fca9 	bl	8001d18 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	18d3      	adds	r3, r2, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043d2:	f7fd fca1 	bl	8001d18 <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	0013      	movs	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	00da      	lsls	r2, r3, #3
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	4353      	muls	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043f8:	e068      	b.n	80044cc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	23c0      	movs	r3, #192	; 0xc0
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	429a      	cmp	r2, r3
 8004402:	d10a      	bne.n	800441a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	b2da      	uxtb	r2, r3
 8004410:	2117      	movs	r1, #23
 8004412:	187b      	adds	r3, r7, r1
 8004414:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004416:	187b      	adds	r3, r7, r1
 8004418:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	3301      	adds	r3, #1
 800441e:	d055      	beq.n	80044cc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004420:	f7fd fc7a 	bl	8001d18 <HAL_GetTick>
 8004424:	0002      	movs	r2, r0
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	429a      	cmp	r2, r3
 800442e:	d902      	bls.n	8004436 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d142      	bne.n	80044bc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	21e0      	movs	r1, #224	; 0xe0
 8004442:	438a      	bics	r2, r1
 8004444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	2382      	movs	r3, #130	; 0x82
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	429a      	cmp	r2, r3
 8004450:	d113      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	429a      	cmp	r2, r3
 800445c:	d005      	beq.n	800446a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	429a      	cmp	r2, r3
 8004468:	d107      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	438a      	bics	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	429a      	cmp	r2, r3
 8004484:	d110      	bne.n	80044a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4916      	ldr	r1, [pc, #88]	; (80044ec <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004492:	400a      	ands	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	0189      	lsls	r1, r1, #6
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	225d      	movs	r2, #93	; 0x5d
 80044ac:	2101      	movs	r1, #1
 80044ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	225c      	movs	r2, #92	; 0x5c
 80044b4:	2100      	movs	r1, #0
 80044b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e010      	b.n	80044de <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d18e      	bne.n	80043fa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b00a      	add	sp, #40	; 0x28
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	20000004 	.word	0x20000004
 80044ec:	ffffdfff 	.word	0xffffdfff

080044f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	2382      	movs	r3, #130	; 0x82
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	429a      	cmp	r2, r3
 8004506:	d113      	bne.n	8004530 <SPI_EndRxTransaction+0x40>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	429a      	cmp	r2, r3
 8004512:	d005      	beq.n	8004520 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	429a      	cmp	r2, r3
 800451e:	d107      	bne.n	8004530 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2140      	movs	r1, #64	; 0x40
 800452c:	438a      	bics	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	0013      	movs	r3, r2
 800453a:	2200      	movs	r2, #0
 800453c:	2180      	movs	r1, #128	; 0x80
 800453e:	f7ff fea7 	bl	8004290 <SPI_WaitFlagStateUntilTimeout>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d007      	beq.n	8004556 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454a:	2220      	movs	r2, #32
 800454c:	431a      	orrs	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e026      	b.n	80045a4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	2382      	movs	r3, #130	; 0x82
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	429a      	cmp	r2, r3
 8004560:	d11f      	bne.n	80045a2 <SPI_EndRxTransaction+0xb2>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	429a      	cmp	r2, r3
 800456c:	d005      	beq.n	800457a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	429a      	cmp	r2, r3
 8004578:	d113      	bne.n	80045a2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	23c0      	movs	r3, #192	; 0xc0
 800457e:	00d9      	lsls	r1, r3, #3
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	0013      	movs	r3, r2
 8004588:	2200      	movs	r2, #0
 800458a:	f7ff ff0f 	bl	80043ac <SPI_WaitFifoStateUntilTimeout>
 800458e:	1e03      	subs	r3, r0, #0
 8004590:	d007      	beq.n	80045a2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	2220      	movs	r2, #32
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e000      	b.n	80045a4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}

080045ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	23c0      	movs	r3, #192	; 0xc0
 80045bc:	0159      	lsls	r1, r3, #5
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	0013      	movs	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	f7ff fef0 	bl	80043ac <SPI_WaitFifoStateUntilTimeout>
 80045cc:	1e03      	subs	r3, r0, #0
 80045ce:	d007      	beq.n	80045e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	2220      	movs	r2, #32
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e027      	b.n	8004630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	0013      	movs	r3, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	f7ff fe4f 	bl	8004290 <SPI_WaitFlagStateUntilTimeout>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d007      	beq.n	8004606 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	2220      	movs	r2, #32
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e014      	b.n	8004630 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	23c0      	movs	r3, #192	; 0xc0
 800460a:	00d9      	lsls	r1, r3, #3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	0013      	movs	r3, r2
 8004614:	2200      	movs	r2, #0
 8004616:	f7ff fec9 	bl	80043ac <SPI_WaitFifoStateUntilTimeout>
 800461a:	1e03      	subs	r3, r0, #0
 800461c:	d007      	beq.n	800462e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004622:	2220      	movs	r2, #32
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e000      	b.n	8004630 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b004      	add	sp, #16
 8004636:	bd80      	pop	{r7, pc}

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	2600      	movs	r6, #0
 800463c:	4d0c      	ldr	r5, [pc, #48]	; (8004670 <__libc_init_array+0x38>)
 800463e:	4c0d      	ldr	r4, [pc, #52]	; (8004674 <__libc_init_array+0x3c>)
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	2600      	movs	r6, #0
 800464a:	f000 f821 	bl	8004690 <_init>
 800464e:	4d0a      	ldr	r5, [pc, #40]	; (8004678 <__libc_init_array+0x40>)
 8004650:	4c0a      	ldr	r4, [pc, #40]	; (800467c <__libc_init_array+0x44>)
 8004652:	1b64      	subs	r4, r4, r5
 8004654:	10a4      	asrs	r4, r4, #2
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	00b3      	lsls	r3, r6, #2
 800465e:	58eb      	ldr	r3, [r5, r3]
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	00b3      	lsls	r3, r6, #2
 8004668:	58eb      	ldr	r3, [r5, r3]
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	0800476c 	.word	0x0800476c
 8004674:	0800476c 	.word	0x0800476c
 8004678:	0800476c 	.word	0x0800476c
 800467c:	08004770 	.word	0x08004770

08004680 <memset>:
 8004680:	0003      	movs	r3, r0
 8004682:	1882      	adds	r2, r0, r2
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <memset+0xa>
 8004688:	4770      	bx	lr
 800468a:	7019      	strb	r1, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	e7f9      	b.n	8004684 <memset+0x4>

08004690 <_init>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr

0800469c <_fini>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr
